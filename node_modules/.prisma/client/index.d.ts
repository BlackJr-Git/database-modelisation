
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Apprenant
 * 
 */
export type Apprenant = $Result.DefaultSelection<Prisma.$ApprenantPayload>
/**
 * Model Ordinateur
 * 
 */
export type Ordinateur = $Result.DefaultSelection<Prisma.$OrdinateurPayload>
/**
 * Model Cohorte
 * 
 */
export type Cohorte = $Result.DefaultSelection<Prisma.$CohortePayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Coach
 * 
 */
export type Coach = $Result.DefaultSelection<Prisma.$CoachPayload>
/**
 * Model Affectation
 * 
 */
export type Affectation = $Result.DefaultSelection<Prisma.$AffectationPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Apprenants
 * const apprenants = await prisma.apprenant.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Apprenants
   * const apprenants = await prisma.apprenant.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.apprenant`: Exposes CRUD operations for the **Apprenant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Apprenants
    * const apprenants = await prisma.apprenant.findMany()
    * ```
    */
  get apprenant(): Prisma.ApprenantDelegate<ExtArgs>;

  /**
   * `prisma.ordinateur`: Exposes CRUD operations for the **Ordinateur** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ordinateurs
    * const ordinateurs = await prisma.ordinateur.findMany()
    * ```
    */
  get ordinateur(): Prisma.OrdinateurDelegate<ExtArgs>;

  /**
   * `prisma.cohorte`: Exposes CRUD operations for the **Cohorte** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cohortes
    * const cohortes = await prisma.cohorte.findMany()
    * ```
    */
  get cohorte(): Prisma.CohorteDelegate<ExtArgs>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs>;

  /**
   * `prisma.coach`: Exposes CRUD operations for the **Coach** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Coaches
    * const coaches = await prisma.coach.findMany()
    * ```
    */
  get coach(): Prisma.CoachDelegate<ExtArgs>;

  /**
   * `prisma.affectation`: Exposes CRUD operations for the **Affectation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Affectations
    * const affectations = await prisma.affectation.findMany()
    * ```
    */
  get affectation(): Prisma.AffectationDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.11.0
   * Query Engine version: efd2449663b3d73d637ea1fd226bafbcf45b3102
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Apprenant: 'Apprenant',
    Ordinateur: 'Ordinateur',
    Cohorte: 'Cohorte',
    Session: 'Session',
    Coach: 'Coach',
    Affectation: 'Affectation'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'apprenant' | 'ordinateur' | 'cohorte' | 'session' | 'coach' | 'affectation'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Apprenant: {
        payload: Prisma.$ApprenantPayload<ExtArgs>
        fields: Prisma.ApprenantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApprenantFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApprenantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApprenantFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApprenantPayload>
          }
          findFirst: {
            args: Prisma.ApprenantFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApprenantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApprenantFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApprenantPayload>
          }
          findMany: {
            args: Prisma.ApprenantFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApprenantPayload>[]
          }
          create: {
            args: Prisma.ApprenantCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApprenantPayload>
          }
          delete: {
            args: Prisma.ApprenantDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApprenantPayload>
          }
          update: {
            args: Prisma.ApprenantUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApprenantPayload>
          }
          deleteMany: {
            args: Prisma.ApprenantDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ApprenantUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ApprenantUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApprenantPayload>
          }
          aggregate: {
            args: Prisma.ApprenantAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateApprenant>
          }
          groupBy: {
            args: Prisma.ApprenantGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ApprenantGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApprenantCountArgs<ExtArgs>,
            result: $Utils.Optional<ApprenantCountAggregateOutputType> | number
          }
        }
      }
      Ordinateur: {
        payload: Prisma.$OrdinateurPayload<ExtArgs>
        fields: Prisma.OrdinateurFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrdinateurFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrdinateurPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrdinateurFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrdinateurPayload>
          }
          findFirst: {
            args: Prisma.OrdinateurFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrdinateurPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrdinateurFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrdinateurPayload>
          }
          findMany: {
            args: Prisma.OrdinateurFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrdinateurPayload>[]
          }
          create: {
            args: Prisma.OrdinateurCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrdinateurPayload>
          }
          delete: {
            args: Prisma.OrdinateurDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrdinateurPayload>
          }
          update: {
            args: Prisma.OrdinateurUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrdinateurPayload>
          }
          deleteMany: {
            args: Prisma.OrdinateurDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.OrdinateurUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.OrdinateurUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrdinateurPayload>
          }
          aggregate: {
            args: Prisma.OrdinateurAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOrdinateur>
          }
          groupBy: {
            args: Prisma.OrdinateurGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OrdinateurGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrdinateurCountArgs<ExtArgs>,
            result: $Utils.Optional<OrdinateurCountAggregateOutputType> | number
          }
        }
      }
      Cohorte: {
        payload: Prisma.$CohortePayload<ExtArgs>
        fields: Prisma.CohorteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CohorteFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CohortePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CohorteFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CohortePayload>
          }
          findFirst: {
            args: Prisma.CohorteFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CohortePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CohorteFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CohortePayload>
          }
          findMany: {
            args: Prisma.CohorteFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CohortePayload>[]
          }
          create: {
            args: Prisma.CohorteCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CohortePayload>
          }
          delete: {
            args: Prisma.CohorteDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CohortePayload>
          }
          update: {
            args: Prisma.CohorteUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CohortePayload>
          }
          deleteMany: {
            args: Prisma.CohorteDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CohorteUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CohorteUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CohortePayload>
          }
          aggregate: {
            args: Prisma.CohorteAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCohorte>
          }
          groupBy: {
            args: Prisma.CohorteGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CohorteGroupByOutputType>[]
          }
          count: {
            args: Prisma.CohorteCountArgs<ExtArgs>,
            result: $Utils.Optional<CohorteCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>,
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Coach: {
        payload: Prisma.$CoachPayload<ExtArgs>
        fields: Prisma.CoachFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CoachFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoachPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CoachFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoachPayload>
          }
          findFirst: {
            args: Prisma.CoachFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoachPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CoachFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoachPayload>
          }
          findMany: {
            args: Prisma.CoachFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoachPayload>[]
          }
          create: {
            args: Prisma.CoachCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoachPayload>
          }
          delete: {
            args: Prisma.CoachDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoachPayload>
          }
          update: {
            args: Prisma.CoachUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoachPayload>
          }
          deleteMany: {
            args: Prisma.CoachDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CoachUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CoachUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoachPayload>
          }
          aggregate: {
            args: Prisma.CoachAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCoach>
          }
          groupBy: {
            args: Prisma.CoachGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CoachGroupByOutputType>[]
          }
          count: {
            args: Prisma.CoachCountArgs<ExtArgs>,
            result: $Utils.Optional<CoachCountAggregateOutputType> | number
          }
        }
      }
      Affectation: {
        payload: Prisma.$AffectationPayload<ExtArgs>
        fields: Prisma.AffectationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AffectationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AffectationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AffectationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AffectationPayload>
          }
          findFirst: {
            args: Prisma.AffectationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AffectationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AffectationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AffectationPayload>
          }
          findMany: {
            args: Prisma.AffectationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AffectationPayload>[]
          }
          create: {
            args: Prisma.AffectationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AffectationPayload>
          }
          delete: {
            args: Prisma.AffectationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AffectationPayload>
          }
          update: {
            args: Prisma.AffectationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AffectationPayload>
          }
          deleteMany: {
            args: Prisma.AffectationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AffectationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AffectationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AffectationPayload>
          }
          aggregate: {
            args: Prisma.AffectationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAffectation>
          }
          groupBy: {
            args: Prisma.AffectationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AffectationGroupByOutputType>[]
          }
          count: {
            args: Prisma.AffectationCountArgs<ExtArgs>,
            result: $Utils.Optional<AffectationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type OrdinateurCountOutputType
   */

  export type OrdinateurCountOutputType = {
    Apprenant: number
  }

  export type OrdinateurCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Apprenant?: boolean | OrdinateurCountOutputTypeCountApprenantArgs
  }

  // Custom InputTypes

  /**
   * OrdinateurCountOutputType without action
   */
  export type OrdinateurCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdinateurCountOutputType
     */
    select?: OrdinateurCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * OrdinateurCountOutputType without action
   */
  export type OrdinateurCountOutputTypeCountApprenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApprenantWhereInput
  }



  /**
   * Count Type CohorteCountOutputType
   */

  export type CohorteCountOutputType = {
    Apprenant: number
    Affectation: number
  }

  export type CohorteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Apprenant?: boolean | CohorteCountOutputTypeCountApprenantArgs
    Affectation?: boolean | CohorteCountOutputTypeCountAffectationArgs
  }

  // Custom InputTypes

  /**
   * CohorteCountOutputType without action
   */
  export type CohorteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CohorteCountOutputType
     */
    select?: CohorteCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CohorteCountOutputType without action
   */
  export type CohorteCountOutputTypeCountApprenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApprenantWhereInput
  }


  /**
   * CohorteCountOutputType without action
   */
  export type CohorteCountOutputTypeCountAffectationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AffectationWhereInput
  }



  /**
   * Count Type SessionCountOutputType
   */

  export type SessionCountOutputType = {
    Cohorte: number
  }

  export type SessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Cohorte?: boolean | SessionCountOutputTypeCountCohorteArgs
  }

  // Custom InputTypes

  /**
   * SessionCountOutputType without action
   */
  export type SessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionCountOutputType
     */
    select?: SessionCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SessionCountOutputType without action
   */
  export type SessionCountOutputTypeCountCohorteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CohorteWhereInput
  }



  /**
   * Count Type CoachCountOutputType
   */

  export type CoachCountOutputType = {
    Affectation: number
  }

  export type CoachCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Affectation?: boolean | CoachCountOutputTypeCountAffectationArgs
  }

  // Custom InputTypes

  /**
   * CoachCountOutputType without action
   */
  export type CoachCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoachCountOutputType
     */
    select?: CoachCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CoachCountOutputType without action
   */
  export type CoachCountOutputTypeCountAffectationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AffectationWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Apprenant
   */

  export type AggregateApprenant = {
    _count: ApprenantCountAggregateOutputType | null
    _avg: ApprenantAvgAggregateOutputType | null
    _sum: ApprenantSumAggregateOutputType | null
    _min: ApprenantMinAggregateOutputType | null
    _max: ApprenantMaxAggregateOutputType | null
  }

  export type ApprenantAvgAggregateOutputType = {
    id: number | null
    ordinateurId: number | null
    cohorteId: number | null
  }

  export type ApprenantSumAggregateOutputType = {
    id: number | null
    ordinateurId: number | null
    cohorteId: number | null
  }

  export type ApprenantMinAggregateOutputType = {
    id: number | null
    ordinateurId: number | null
    cohorteId: number | null
    prenom: string | null
    nom: string | null
    postnom: string | null
    date_naissance: Date | null
    adresse: string | null
    email: string | null
    telephone: string | null
    password: string | null
  }

  export type ApprenantMaxAggregateOutputType = {
    id: number | null
    ordinateurId: number | null
    cohorteId: number | null
    prenom: string | null
    nom: string | null
    postnom: string | null
    date_naissance: Date | null
    adresse: string | null
    email: string | null
    telephone: string | null
    password: string | null
  }

  export type ApprenantCountAggregateOutputType = {
    id: number
    ordinateurId: number
    cohorteId: number
    prenom: number
    nom: number
    postnom: number
    date_naissance: number
    adresse: number
    email: number
    telephone: number
    password: number
    _all: number
  }


  export type ApprenantAvgAggregateInputType = {
    id?: true
    ordinateurId?: true
    cohorteId?: true
  }

  export type ApprenantSumAggregateInputType = {
    id?: true
    ordinateurId?: true
    cohorteId?: true
  }

  export type ApprenantMinAggregateInputType = {
    id?: true
    ordinateurId?: true
    cohorteId?: true
    prenom?: true
    nom?: true
    postnom?: true
    date_naissance?: true
    adresse?: true
    email?: true
    telephone?: true
    password?: true
  }

  export type ApprenantMaxAggregateInputType = {
    id?: true
    ordinateurId?: true
    cohorteId?: true
    prenom?: true
    nom?: true
    postnom?: true
    date_naissance?: true
    adresse?: true
    email?: true
    telephone?: true
    password?: true
  }

  export type ApprenantCountAggregateInputType = {
    id?: true
    ordinateurId?: true
    cohorteId?: true
    prenom?: true
    nom?: true
    postnom?: true
    date_naissance?: true
    adresse?: true
    email?: true
    telephone?: true
    password?: true
    _all?: true
  }

  export type ApprenantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Apprenant to aggregate.
     */
    where?: ApprenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Apprenants to fetch.
     */
    orderBy?: ApprenantOrderByWithRelationInput | ApprenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApprenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Apprenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Apprenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Apprenants
    **/
    _count?: true | ApprenantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ApprenantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ApprenantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApprenantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApprenantMaxAggregateInputType
  }

  export type GetApprenantAggregateType<T extends ApprenantAggregateArgs> = {
        [P in keyof T & keyof AggregateApprenant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApprenant[P]>
      : GetScalarType<T[P], AggregateApprenant[P]>
  }




  export type ApprenantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApprenantWhereInput
    orderBy?: ApprenantOrderByWithAggregationInput | ApprenantOrderByWithAggregationInput[]
    by: ApprenantScalarFieldEnum[] | ApprenantScalarFieldEnum
    having?: ApprenantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApprenantCountAggregateInputType | true
    _avg?: ApprenantAvgAggregateInputType
    _sum?: ApprenantSumAggregateInputType
    _min?: ApprenantMinAggregateInputType
    _max?: ApprenantMaxAggregateInputType
  }

  export type ApprenantGroupByOutputType = {
    id: number
    ordinateurId: number
    cohorteId: number
    prenom: string
    nom: string
    postnom: string
    date_naissance: Date
    adresse: string
    email: string
    telephone: string
    password: string
    _count: ApprenantCountAggregateOutputType | null
    _avg: ApprenantAvgAggregateOutputType | null
    _sum: ApprenantSumAggregateOutputType | null
    _min: ApprenantMinAggregateOutputType | null
    _max: ApprenantMaxAggregateOutputType | null
  }

  type GetApprenantGroupByPayload<T extends ApprenantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApprenantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApprenantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApprenantGroupByOutputType[P]>
            : GetScalarType<T[P], ApprenantGroupByOutputType[P]>
        }
      >
    >


  export type ApprenantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ordinateurId?: boolean
    cohorteId?: boolean
    prenom?: boolean
    nom?: boolean
    postnom?: boolean
    date_naissance?: boolean
    adresse?: boolean
    email?: boolean
    telephone?: boolean
    password?: boolean
    ordinateur?: boolean | OrdinateurDefaultArgs<ExtArgs>
    cohorte?: boolean | CohorteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["apprenant"]>

  export type ApprenantSelectScalar = {
    id?: boolean
    ordinateurId?: boolean
    cohorteId?: boolean
    prenom?: boolean
    nom?: boolean
    postnom?: boolean
    date_naissance?: boolean
    adresse?: boolean
    email?: boolean
    telephone?: boolean
    password?: boolean
  }

  export type ApprenantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ordinateur?: boolean | OrdinateurDefaultArgs<ExtArgs>
    cohorte?: boolean | CohorteDefaultArgs<ExtArgs>
  }


  export type $ApprenantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Apprenant"
    objects: {
      ordinateur: Prisma.$OrdinateurPayload<ExtArgs>
      cohorte: Prisma.$CohortePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      ordinateurId: number
      cohorteId: number
      prenom: string
      nom: string
      postnom: string
      date_naissance: Date
      adresse: string
      email: string
      telephone: string
      password: string
    }, ExtArgs["result"]["apprenant"]>
    composites: {}
  }


  type ApprenantGetPayload<S extends boolean | null | undefined | ApprenantDefaultArgs> = $Result.GetResult<Prisma.$ApprenantPayload, S>

  type ApprenantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ApprenantFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ApprenantCountAggregateInputType | true
    }

  export interface ApprenantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Apprenant'], meta: { name: 'Apprenant' } }
    /**
     * Find zero or one Apprenant that matches the filter.
     * @param {ApprenantFindUniqueArgs} args - Arguments to find a Apprenant
     * @example
     * // Get one Apprenant
     * const apprenant = await prisma.apprenant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ApprenantFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ApprenantFindUniqueArgs<ExtArgs>>
    ): Prisma__ApprenantClient<$Result.GetResult<Prisma.$ApprenantPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Apprenant that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ApprenantFindUniqueOrThrowArgs} args - Arguments to find a Apprenant
     * @example
     * // Get one Apprenant
     * const apprenant = await prisma.apprenant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ApprenantFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ApprenantFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ApprenantClient<$Result.GetResult<Prisma.$ApprenantPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Apprenant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprenantFindFirstArgs} args - Arguments to find a Apprenant
     * @example
     * // Get one Apprenant
     * const apprenant = await prisma.apprenant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ApprenantFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ApprenantFindFirstArgs<ExtArgs>>
    ): Prisma__ApprenantClient<$Result.GetResult<Prisma.$ApprenantPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Apprenant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprenantFindFirstOrThrowArgs} args - Arguments to find a Apprenant
     * @example
     * // Get one Apprenant
     * const apprenant = await prisma.apprenant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ApprenantFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ApprenantFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ApprenantClient<$Result.GetResult<Prisma.$ApprenantPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Apprenants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprenantFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Apprenants
     * const apprenants = await prisma.apprenant.findMany()
     * 
     * // Get first 10 Apprenants
     * const apprenants = await prisma.apprenant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const apprenantWithIdOnly = await prisma.apprenant.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ApprenantFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ApprenantFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApprenantPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Apprenant.
     * @param {ApprenantCreateArgs} args - Arguments to create a Apprenant.
     * @example
     * // Create one Apprenant
     * const Apprenant = await prisma.apprenant.create({
     *   data: {
     *     // ... data to create a Apprenant
     *   }
     * })
     * 
    **/
    create<T extends ApprenantCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ApprenantCreateArgs<ExtArgs>>
    ): Prisma__ApprenantClient<$Result.GetResult<Prisma.$ApprenantPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Apprenant.
     * @param {ApprenantDeleteArgs} args - Arguments to delete one Apprenant.
     * @example
     * // Delete one Apprenant
     * const Apprenant = await prisma.apprenant.delete({
     *   where: {
     *     // ... filter to delete one Apprenant
     *   }
     * })
     * 
    **/
    delete<T extends ApprenantDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ApprenantDeleteArgs<ExtArgs>>
    ): Prisma__ApprenantClient<$Result.GetResult<Prisma.$ApprenantPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Apprenant.
     * @param {ApprenantUpdateArgs} args - Arguments to update one Apprenant.
     * @example
     * // Update one Apprenant
     * const apprenant = await prisma.apprenant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ApprenantUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ApprenantUpdateArgs<ExtArgs>>
    ): Prisma__ApprenantClient<$Result.GetResult<Prisma.$ApprenantPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Apprenants.
     * @param {ApprenantDeleteManyArgs} args - Arguments to filter Apprenants to delete.
     * @example
     * // Delete a few Apprenants
     * const { count } = await prisma.apprenant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ApprenantDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ApprenantDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Apprenants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprenantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Apprenants
     * const apprenant = await prisma.apprenant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ApprenantUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ApprenantUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Apprenant.
     * @param {ApprenantUpsertArgs} args - Arguments to update or create a Apprenant.
     * @example
     * // Update or create a Apprenant
     * const apprenant = await prisma.apprenant.upsert({
     *   create: {
     *     // ... data to create a Apprenant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Apprenant we want to update
     *   }
     * })
    **/
    upsert<T extends ApprenantUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ApprenantUpsertArgs<ExtArgs>>
    ): Prisma__ApprenantClient<$Result.GetResult<Prisma.$ApprenantPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Apprenants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprenantCountArgs} args - Arguments to filter Apprenants to count.
     * @example
     * // Count the number of Apprenants
     * const count = await prisma.apprenant.count({
     *   where: {
     *     // ... the filter for the Apprenants we want to count
     *   }
     * })
    **/
    count<T extends ApprenantCountArgs>(
      args?: Subset<T, ApprenantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApprenantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Apprenant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprenantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApprenantAggregateArgs>(args: Subset<T, ApprenantAggregateArgs>): Prisma.PrismaPromise<GetApprenantAggregateType<T>>

    /**
     * Group by Apprenant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprenantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApprenantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApprenantGroupByArgs['orderBy'] }
        : { orderBy?: ApprenantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApprenantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApprenantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Apprenant model
   */
  readonly fields: ApprenantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Apprenant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApprenantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    ordinateur<T extends OrdinateurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrdinateurDefaultArgs<ExtArgs>>): Prisma__OrdinateurClient<$Result.GetResult<Prisma.$OrdinateurPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    cohorte<T extends CohorteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CohorteDefaultArgs<ExtArgs>>): Prisma__CohorteClient<$Result.GetResult<Prisma.$CohortePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Apprenant model
   */ 
  interface ApprenantFieldRefs {
    readonly id: FieldRef<"Apprenant", 'Int'>
    readonly ordinateurId: FieldRef<"Apprenant", 'Int'>
    readonly cohorteId: FieldRef<"Apprenant", 'Int'>
    readonly prenom: FieldRef<"Apprenant", 'String'>
    readonly nom: FieldRef<"Apprenant", 'String'>
    readonly postnom: FieldRef<"Apprenant", 'String'>
    readonly date_naissance: FieldRef<"Apprenant", 'DateTime'>
    readonly adresse: FieldRef<"Apprenant", 'String'>
    readonly email: FieldRef<"Apprenant", 'String'>
    readonly telephone: FieldRef<"Apprenant", 'String'>
    readonly password: FieldRef<"Apprenant", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Apprenant findUnique
   */
  export type ApprenantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Apprenant
     */
    select?: ApprenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApprenantInclude<ExtArgs> | null
    /**
     * Filter, which Apprenant to fetch.
     */
    where: ApprenantWhereUniqueInput
  }


  /**
   * Apprenant findUniqueOrThrow
   */
  export type ApprenantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Apprenant
     */
    select?: ApprenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApprenantInclude<ExtArgs> | null
    /**
     * Filter, which Apprenant to fetch.
     */
    where: ApprenantWhereUniqueInput
  }


  /**
   * Apprenant findFirst
   */
  export type ApprenantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Apprenant
     */
    select?: ApprenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApprenantInclude<ExtArgs> | null
    /**
     * Filter, which Apprenant to fetch.
     */
    where?: ApprenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Apprenants to fetch.
     */
    orderBy?: ApprenantOrderByWithRelationInput | ApprenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Apprenants.
     */
    cursor?: ApprenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Apprenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Apprenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Apprenants.
     */
    distinct?: ApprenantScalarFieldEnum | ApprenantScalarFieldEnum[]
  }


  /**
   * Apprenant findFirstOrThrow
   */
  export type ApprenantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Apprenant
     */
    select?: ApprenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApprenantInclude<ExtArgs> | null
    /**
     * Filter, which Apprenant to fetch.
     */
    where?: ApprenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Apprenants to fetch.
     */
    orderBy?: ApprenantOrderByWithRelationInput | ApprenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Apprenants.
     */
    cursor?: ApprenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Apprenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Apprenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Apprenants.
     */
    distinct?: ApprenantScalarFieldEnum | ApprenantScalarFieldEnum[]
  }


  /**
   * Apprenant findMany
   */
  export type ApprenantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Apprenant
     */
    select?: ApprenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApprenantInclude<ExtArgs> | null
    /**
     * Filter, which Apprenants to fetch.
     */
    where?: ApprenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Apprenants to fetch.
     */
    orderBy?: ApprenantOrderByWithRelationInput | ApprenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Apprenants.
     */
    cursor?: ApprenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Apprenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Apprenants.
     */
    skip?: number
    distinct?: ApprenantScalarFieldEnum | ApprenantScalarFieldEnum[]
  }


  /**
   * Apprenant create
   */
  export type ApprenantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Apprenant
     */
    select?: ApprenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApprenantInclude<ExtArgs> | null
    /**
     * The data needed to create a Apprenant.
     */
    data: XOR<ApprenantCreateInput, ApprenantUncheckedCreateInput>
  }


  /**
   * Apprenant update
   */
  export type ApprenantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Apprenant
     */
    select?: ApprenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApprenantInclude<ExtArgs> | null
    /**
     * The data needed to update a Apprenant.
     */
    data: XOR<ApprenantUpdateInput, ApprenantUncheckedUpdateInput>
    /**
     * Choose, which Apprenant to update.
     */
    where: ApprenantWhereUniqueInput
  }


  /**
   * Apprenant updateMany
   */
  export type ApprenantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Apprenants.
     */
    data: XOR<ApprenantUpdateManyMutationInput, ApprenantUncheckedUpdateManyInput>
    /**
     * Filter which Apprenants to update
     */
    where?: ApprenantWhereInput
  }


  /**
   * Apprenant upsert
   */
  export type ApprenantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Apprenant
     */
    select?: ApprenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApprenantInclude<ExtArgs> | null
    /**
     * The filter to search for the Apprenant to update in case it exists.
     */
    where: ApprenantWhereUniqueInput
    /**
     * In case the Apprenant found by the `where` argument doesn't exist, create a new Apprenant with this data.
     */
    create: XOR<ApprenantCreateInput, ApprenantUncheckedCreateInput>
    /**
     * In case the Apprenant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApprenantUpdateInput, ApprenantUncheckedUpdateInput>
  }


  /**
   * Apprenant delete
   */
  export type ApprenantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Apprenant
     */
    select?: ApprenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApprenantInclude<ExtArgs> | null
    /**
     * Filter which Apprenant to delete.
     */
    where: ApprenantWhereUniqueInput
  }


  /**
   * Apprenant deleteMany
   */
  export type ApprenantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Apprenants to delete
     */
    where?: ApprenantWhereInput
  }


  /**
   * Apprenant without action
   */
  export type ApprenantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Apprenant
     */
    select?: ApprenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApprenantInclude<ExtArgs> | null
  }



  /**
   * Model Ordinateur
   */

  export type AggregateOrdinateur = {
    _count: OrdinateurCountAggregateOutputType | null
    _avg: OrdinateurAvgAggregateOutputType | null
    _sum: OrdinateurSumAggregateOutputType | null
    _min: OrdinateurMinAggregateOutputType | null
    _max: OrdinateurMaxAggregateOutputType | null
  }

  export type OrdinateurAvgAggregateOutputType = {
    id: number | null
  }

  export type OrdinateurSumAggregateOutputType = {
    id: number | null
  }

  export type OrdinateurMinAggregateOutputType = {
    id: number | null
    tag: string | null
    modele: string | null
    fabriquant: string | null
  }

  export type OrdinateurMaxAggregateOutputType = {
    id: number | null
    tag: string | null
    modele: string | null
    fabriquant: string | null
  }

  export type OrdinateurCountAggregateOutputType = {
    id: number
    tag: number
    modele: number
    fabriquant: number
    _all: number
  }


  export type OrdinateurAvgAggregateInputType = {
    id?: true
  }

  export type OrdinateurSumAggregateInputType = {
    id?: true
  }

  export type OrdinateurMinAggregateInputType = {
    id?: true
    tag?: true
    modele?: true
    fabriquant?: true
  }

  export type OrdinateurMaxAggregateInputType = {
    id?: true
    tag?: true
    modele?: true
    fabriquant?: true
  }

  export type OrdinateurCountAggregateInputType = {
    id?: true
    tag?: true
    modele?: true
    fabriquant?: true
    _all?: true
  }

  export type OrdinateurAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ordinateur to aggregate.
     */
    where?: OrdinateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ordinateurs to fetch.
     */
    orderBy?: OrdinateurOrderByWithRelationInput | OrdinateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrdinateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ordinateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ordinateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ordinateurs
    **/
    _count?: true | OrdinateurCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrdinateurAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrdinateurSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrdinateurMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrdinateurMaxAggregateInputType
  }

  export type GetOrdinateurAggregateType<T extends OrdinateurAggregateArgs> = {
        [P in keyof T & keyof AggregateOrdinateur]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrdinateur[P]>
      : GetScalarType<T[P], AggregateOrdinateur[P]>
  }




  export type OrdinateurGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrdinateurWhereInput
    orderBy?: OrdinateurOrderByWithAggregationInput | OrdinateurOrderByWithAggregationInput[]
    by: OrdinateurScalarFieldEnum[] | OrdinateurScalarFieldEnum
    having?: OrdinateurScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrdinateurCountAggregateInputType | true
    _avg?: OrdinateurAvgAggregateInputType
    _sum?: OrdinateurSumAggregateInputType
    _min?: OrdinateurMinAggregateInputType
    _max?: OrdinateurMaxAggregateInputType
  }

  export type OrdinateurGroupByOutputType = {
    id: number
    tag: string
    modele: string
    fabriquant: string
    _count: OrdinateurCountAggregateOutputType | null
    _avg: OrdinateurAvgAggregateOutputType | null
    _sum: OrdinateurSumAggregateOutputType | null
    _min: OrdinateurMinAggregateOutputType | null
    _max: OrdinateurMaxAggregateOutputType | null
  }

  type GetOrdinateurGroupByPayload<T extends OrdinateurGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrdinateurGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrdinateurGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrdinateurGroupByOutputType[P]>
            : GetScalarType<T[P], OrdinateurGroupByOutputType[P]>
        }
      >
    >


  export type OrdinateurSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tag?: boolean
    modele?: boolean
    fabriquant?: boolean
    Apprenant?: boolean | Ordinateur$ApprenantArgs<ExtArgs>
    _count?: boolean | OrdinateurCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ordinateur"]>

  export type OrdinateurSelectScalar = {
    id?: boolean
    tag?: boolean
    modele?: boolean
    fabriquant?: boolean
  }

  export type OrdinateurInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Apprenant?: boolean | Ordinateur$ApprenantArgs<ExtArgs>
    _count?: boolean | OrdinateurCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $OrdinateurPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ordinateur"
    objects: {
      Apprenant: Prisma.$ApprenantPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tag: string
      modele: string
      fabriquant: string
    }, ExtArgs["result"]["ordinateur"]>
    composites: {}
  }


  type OrdinateurGetPayload<S extends boolean | null | undefined | OrdinateurDefaultArgs> = $Result.GetResult<Prisma.$OrdinateurPayload, S>

  type OrdinateurCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OrdinateurFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrdinateurCountAggregateInputType | true
    }

  export interface OrdinateurDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ordinateur'], meta: { name: 'Ordinateur' } }
    /**
     * Find zero or one Ordinateur that matches the filter.
     * @param {OrdinateurFindUniqueArgs} args - Arguments to find a Ordinateur
     * @example
     * // Get one Ordinateur
     * const ordinateur = await prisma.ordinateur.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrdinateurFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, OrdinateurFindUniqueArgs<ExtArgs>>
    ): Prisma__OrdinateurClient<$Result.GetResult<Prisma.$OrdinateurPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Ordinateur that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {OrdinateurFindUniqueOrThrowArgs} args - Arguments to find a Ordinateur
     * @example
     * // Get one Ordinateur
     * const ordinateur = await prisma.ordinateur.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OrdinateurFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrdinateurFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__OrdinateurClient<$Result.GetResult<Prisma.$OrdinateurPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Ordinateur that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdinateurFindFirstArgs} args - Arguments to find a Ordinateur
     * @example
     * // Get one Ordinateur
     * const ordinateur = await prisma.ordinateur.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrdinateurFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, OrdinateurFindFirstArgs<ExtArgs>>
    ): Prisma__OrdinateurClient<$Result.GetResult<Prisma.$OrdinateurPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Ordinateur that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdinateurFindFirstOrThrowArgs} args - Arguments to find a Ordinateur
     * @example
     * // Get one Ordinateur
     * const ordinateur = await prisma.ordinateur.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OrdinateurFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrdinateurFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__OrdinateurClient<$Result.GetResult<Prisma.$OrdinateurPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Ordinateurs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdinateurFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ordinateurs
     * const ordinateurs = await prisma.ordinateur.findMany()
     * 
     * // Get first 10 Ordinateurs
     * const ordinateurs = await prisma.ordinateur.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ordinateurWithIdOnly = await prisma.ordinateur.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OrdinateurFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrdinateurFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrdinateurPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Ordinateur.
     * @param {OrdinateurCreateArgs} args - Arguments to create a Ordinateur.
     * @example
     * // Create one Ordinateur
     * const Ordinateur = await prisma.ordinateur.create({
     *   data: {
     *     // ... data to create a Ordinateur
     *   }
     * })
     * 
    **/
    create<T extends OrdinateurCreateArgs<ExtArgs>>(
      args: SelectSubset<T, OrdinateurCreateArgs<ExtArgs>>
    ): Prisma__OrdinateurClient<$Result.GetResult<Prisma.$OrdinateurPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Ordinateur.
     * @param {OrdinateurDeleteArgs} args - Arguments to delete one Ordinateur.
     * @example
     * // Delete one Ordinateur
     * const Ordinateur = await prisma.ordinateur.delete({
     *   where: {
     *     // ... filter to delete one Ordinateur
     *   }
     * })
     * 
    **/
    delete<T extends OrdinateurDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, OrdinateurDeleteArgs<ExtArgs>>
    ): Prisma__OrdinateurClient<$Result.GetResult<Prisma.$OrdinateurPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Ordinateur.
     * @param {OrdinateurUpdateArgs} args - Arguments to update one Ordinateur.
     * @example
     * // Update one Ordinateur
     * const ordinateur = await prisma.ordinateur.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrdinateurUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, OrdinateurUpdateArgs<ExtArgs>>
    ): Prisma__OrdinateurClient<$Result.GetResult<Prisma.$OrdinateurPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Ordinateurs.
     * @param {OrdinateurDeleteManyArgs} args - Arguments to filter Ordinateurs to delete.
     * @example
     * // Delete a few Ordinateurs
     * const { count } = await prisma.ordinateur.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrdinateurDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrdinateurDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ordinateurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdinateurUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ordinateurs
     * const ordinateur = await prisma.ordinateur.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrdinateurUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, OrdinateurUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ordinateur.
     * @param {OrdinateurUpsertArgs} args - Arguments to update or create a Ordinateur.
     * @example
     * // Update or create a Ordinateur
     * const ordinateur = await prisma.ordinateur.upsert({
     *   create: {
     *     // ... data to create a Ordinateur
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ordinateur we want to update
     *   }
     * })
    **/
    upsert<T extends OrdinateurUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, OrdinateurUpsertArgs<ExtArgs>>
    ): Prisma__OrdinateurClient<$Result.GetResult<Prisma.$OrdinateurPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Ordinateurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdinateurCountArgs} args - Arguments to filter Ordinateurs to count.
     * @example
     * // Count the number of Ordinateurs
     * const count = await prisma.ordinateur.count({
     *   where: {
     *     // ... the filter for the Ordinateurs we want to count
     *   }
     * })
    **/
    count<T extends OrdinateurCountArgs>(
      args?: Subset<T, OrdinateurCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrdinateurCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ordinateur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdinateurAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrdinateurAggregateArgs>(args: Subset<T, OrdinateurAggregateArgs>): Prisma.PrismaPromise<GetOrdinateurAggregateType<T>>

    /**
     * Group by Ordinateur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdinateurGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrdinateurGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrdinateurGroupByArgs['orderBy'] }
        : { orderBy?: OrdinateurGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrdinateurGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrdinateurGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ordinateur model
   */
  readonly fields: OrdinateurFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ordinateur.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrdinateurClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Apprenant<T extends Ordinateur$ApprenantArgs<ExtArgs> = {}>(args?: Subset<T, Ordinateur$ApprenantArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApprenantPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Ordinateur model
   */ 
  interface OrdinateurFieldRefs {
    readonly id: FieldRef<"Ordinateur", 'Int'>
    readonly tag: FieldRef<"Ordinateur", 'String'>
    readonly modele: FieldRef<"Ordinateur", 'String'>
    readonly fabriquant: FieldRef<"Ordinateur", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Ordinateur findUnique
   */
  export type OrdinateurFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ordinateur
     */
    select?: OrdinateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdinateurInclude<ExtArgs> | null
    /**
     * Filter, which Ordinateur to fetch.
     */
    where: OrdinateurWhereUniqueInput
  }


  /**
   * Ordinateur findUniqueOrThrow
   */
  export type OrdinateurFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ordinateur
     */
    select?: OrdinateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdinateurInclude<ExtArgs> | null
    /**
     * Filter, which Ordinateur to fetch.
     */
    where: OrdinateurWhereUniqueInput
  }


  /**
   * Ordinateur findFirst
   */
  export type OrdinateurFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ordinateur
     */
    select?: OrdinateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdinateurInclude<ExtArgs> | null
    /**
     * Filter, which Ordinateur to fetch.
     */
    where?: OrdinateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ordinateurs to fetch.
     */
    orderBy?: OrdinateurOrderByWithRelationInput | OrdinateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ordinateurs.
     */
    cursor?: OrdinateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ordinateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ordinateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ordinateurs.
     */
    distinct?: OrdinateurScalarFieldEnum | OrdinateurScalarFieldEnum[]
  }


  /**
   * Ordinateur findFirstOrThrow
   */
  export type OrdinateurFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ordinateur
     */
    select?: OrdinateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdinateurInclude<ExtArgs> | null
    /**
     * Filter, which Ordinateur to fetch.
     */
    where?: OrdinateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ordinateurs to fetch.
     */
    orderBy?: OrdinateurOrderByWithRelationInput | OrdinateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ordinateurs.
     */
    cursor?: OrdinateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ordinateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ordinateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ordinateurs.
     */
    distinct?: OrdinateurScalarFieldEnum | OrdinateurScalarFieldEnum[]
  }


  /**
   * Ordinateur findMany
   */
  export type OrdinateurFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ordinateur
     */
    select?: OrdinateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdinateurInclude<ExtArgs> | null
    /**
     * Filter, which Ordinateurs to fetch.
     */
    where?: OrdinateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ordinateurs to fetch.
     */
    orderBy?: OrdinateurOrderByWithRelationInput | OrdinateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ordinateurs.
     */
    cursor?: OrdinateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ordinateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ordinateurs.
     */
    skip?: number
    distinct?: OrdinateurScalarFieldEnum | OrdinateurScalarFieldEnum[]
  }


  /**
   * Ordinateur create
   */
  export type OrdinateurCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ordinateur
     */
    select?: OrdinateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdinateurInclude<ExtArgs> | null
    /**
     * The data needed to create a Ordinateur.
     */
    data: XOR<OrdinateurCreateInput, OrdinateurUncheckedCreateInput>
  }


  /**
   * Ordinateur update
   */
  export type OrdinateurUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ordinateur
     */
    select?: OrdinateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdinateurInclude<ExtArgs> | null
    /**
     * The data needed to update a Ordinateur.
     */
    data: XOR<OrdinateurUpdateInput, OrdinateurUncheckedUpdateInput>
    /**
     * Choose, which Ordinateur to update.
     */
    where: OrdinateurWhereUniqueInput
  }


  /**
   * Ordinateur updateMany
   */
  export type OrdinateurUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ordinateurs.
     */
    data: XOR<OrdinateurUpdateManyMutationInput, OrdinateurUncheckedUpdateManyInput>
    /**
     * Filter which Ordinateurs to update
     */
    where?: OrdinateurWhereInput
  }


  /**
   * Ordinateur upsert
   */
  export type OrdinateurUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ordinateur
     */
    select?: OrdinateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdinateurInclude<ExtArgs> | null
    /**
     * The filter to search for the Ordinateur to update in case it exists.
     */
    where: OrdinateurWhereUniqueInput
    /**
     * In case the Ordinateur found by the `where` argument doesn't exist, create a new Ordinateur with this data.
     */
    create: XOR<OrdinateurCreateInput, OrdinateurUncheckedCreateInput>
    /**
     * In case the Ordinateur was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrdinateurUpdateInput, OrdinateurUncheckedUpdateInput>
  }


  /**
   * Ordinateur delete
   */
  export type OrdinateurDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ordinateur
     */
    select?: OrdinateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdinateurInclude<ExtArgs> | null
    /**
     * Filter which Ordinateur to delete.
     */
    where: OrdinateurWhereUniqueInput
  }


  /**
   * Ordinateur deleteMany
   */
  export type OrdinateurDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ordinateurs to delete
     */
    where?: OrdinateurWhereInput
  }


  /**
   * Ordinateur.Apprenant
   */
  export type Ordinateur$ApprenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Apprenant
     */
    select?: ApprenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApprenantInclude<ExtArgs> | null
    where?: ApprenantWhereInput
    orderBy?: ApprenantOrderByWithRelationInput | ApprenantOrderByWithRelationInput[]
    cursor?: ApprenantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApprenantScalarFieldEnum | ApprenantScalarFieldEnum[]
  }


  /**
   * Ordinateur without action
   */
  export type OrdinateurDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ordinateur
     */
    select?: OrdinateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdinateurInclude<ExtArgs> | null
  }



  /**
   * Model Cohorte
   */

  export type AggregateCohorte = {
    _count: CohorteCountAggregateOutputType | null
    _avg: CohorteAvgAggregateOutputType | null
    _sum: CohorteSumAggregateOutputType | null
    _min: CohorteMinAggregateOutputType | null
    _max: CohorteMaxAggregateOutputType | null
  }

  export type CohorteAvgAggregateOutputType = {
    id: number | null
    code: number | null
    sessionId: number | null
  }

  export type CohorteSumAggregateOutputType = {
    id: number | null
    code: number | null
    sessionId: number | null
  }

  export type CohorteMinAggregateOutputType = {
    id: number | null
    code: number | null
    sessionId: number | null
    description: string | null
  }

  export type CohorteMaxAggregateOutputType = {
    id: number | null
    code: number | null
    sessionId: number | null
    description: string | null
  }

  export type CohorteCountAggregateOutputType = {
    id: number
    code: number
    sessionId: number
    description: number
    _all: number
  }


  export type CohorteAvgAggregateInputType = {
    id?: true
    code?: true
    sessionId?: true
  }

  export type CohorteSumAggregateInputType = {
    id?: true
    code?: true
    sessionId?: true
  }

  export type CohorteMinAggregateInputType = {
    id?: true
    code?: true
    sessionId?: true
    description?: true
  }

  export type CohorteMaxAggregateInputType = {
    id?: true
    code?: true
    sessionId?: true
    description?: true
  }

  export type CohorteCountAggregateInputType = {
    id?: true
    code?: true
    sessionId?: true
    description?: true
    _all?: true
  }

  export type CohorteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cohorte to aggregate.
     */
    where?: CohorteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cohortes to fetch.
     */
    orderBy?: CohorteOrderByWithRelationInput | CohorteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CohorteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cohortes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cohortes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cohortes
    **/
    _count?: true | CohorteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CohorteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CohorteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CohorteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CohorteMaxAggregateInputType
  }

  export type GetCohorteAggregateType<T extends CohorteAggregateArgs> = {
        [P in keyof T & keyof AggregateCohorte]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCohorte[P]>
      : GetScalarType<T[P], AggregateCohorte[P]>
  }




  export type CohorteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CohorteWhereInput
    orderBy?: CohorteOrderByWithAggregationInput | CohorteOrderByWithAggregationInput[]
    by: CohorteScalarFieldEnum[] | CohorteScalarFieldEnum
    having?: CohorteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CohorteCountAggregateInputType | true
    _avg?: CohorteAvgAggregateInputType
    _sum?: CohorteSumAggregateInputType
    _min?: CohorteMinAggregateInputType
    _max?: CohorteMaxAggregateInputType
  }

  export type CohorteGroupByOutputType = {
    id: number
    code: number
    sessionId: number
    description: string
    _count: CohorteCountAggregateOutputType | null
    _avg: CohorteAvgAggregateOutputType | null
    _sum: CohorteSumAggregateOutputType | null
    _min: CohorteMinAggregateOutputType | null
    _max: CohorteMaxAggregateOutputType | null
  }

  type GetCohorteGroupByPayload<T extends CohorteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CohorteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CohorteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CohorteGroupByOutputType[P]>
            : GetScalarType<T[P], CohorteGroupByOutputType[P]>
        }
      >
    >


  export type CohorteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    sessionId?: boolean
    description?: boolean
    session?: boolean | SessionDefaultArgs<ExtArgs>
    Apprenant?: boolean | Cohorte$ApprenantArgs<ExtArgs>
    Affectation?: boolean | Cohorte$AffectationArgs<ExtArgs>
    _count?: boolean | CohorteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cohorte"]>

  export type CohorteSelectScalar = {
    id?: boolean
    code?: boolean
    sessionId?: boolean
    description?: boolean
  }

  export type CohorteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | SessionDefaultArgs<ExtArgs>
    Apprenant?: boolean | Cohorte$ApprenantArgs<ExtArgs>
    Affectation?: boolean | Cohorte$AffectationArgs<ExtArgs>
    _count?: boolean | CohorteCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CohortePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cohorte"
    objects: {
      session: Prisma.$SessionPayload<ExtArgs>
      Apprenant: Prisma.$ApprenantPayload<ExtArgs>[]
      Affectation: Prisma.$AffectationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: number
      sessionId: number
      description: string
    }, ExtArgs["result"]["cohorte"]>
    composites: {}
  }


  type CohorteGetPayload<S extends boolean | null | undefined | CohorteDefaultArgs> = $Result.GetResult<Prisma.$CohortePayload, S>

  type CohorteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CohorteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CohorteCountAggregateInputType | true
    }

  export interface CohorteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cohorte'], meta: { name: 'Cohorte' } }
    /**
     * Find zero or one Cohorte that matches the filter.
     * @param {CohorteFindUniqueArgs} args - Arguments to find a Cohorte
     * @example
     * // Get one Cohorte
     * const cohorte = await prisma.cohorte.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CohorteFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CohorteFindUniqueArgs<ExtArgs>>
    ): Prisma__CohorteClient<$Result.GetResult<Prisma.$CohortePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Cohorte that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CohorteFindUniqueOrThrowArgs} args - Arguments to find a Cohorte
     * @example
     * // Get one Cohorte
     * const cohorte = await prisma.cohorte.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CohorteFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CohorteFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CohorteClient<$Result.GetResult<Prisma.$CohortePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Cohorte that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CohorteFindFirstArgs} args - Arguments to find a Cohorte
     * @example
     * // Get one Cohorte
     * const cohorte = await prisma.cohorte.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CohorteFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CohorteFindFirstArgs<ExtArgs>>
    ): Prisma__CohorteClient<$Result.GetResult<Prisma.$CohortePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Cohorte that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CohorteFindFirstOrThrowArgs} args - Arguments to find a Cohorte
     * @example
     * // Get one Cohorte
     * const cohorte = await prisma.cohorte.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CohorteFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CohorteFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CohorteClient<$Result.GetResult<Prisma.$CohortePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Cohortes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CohorteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cohortes
     * const cohortes = await prisma.cohorte.findMany()
     * 
     * // Get first 10 Cohortes
     * const cohortes = await prisma.cohorte.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cohorteWithIdOnly = await prisma.cohorte.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CohorteFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CohorteFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CohortePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Cohorte.
     * @param {CohorteCreateArgs} args - Arguments to create a Cohorte.
     * @example
     * // Create one Cohorte
     * const Cohorte = await prisma.cohorte.create({
     *   data: {
     *     // ... data to create a Cohorte
     *   }
     * })
     * 
    **/
    create<T extends CohorteCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CohorteCreateArgs<ExtArgs>>
    ): Prisma__CohorteClient<$Result.GetResult<Prisma.$CohortePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Cohorte.
     * @param {CohorteDeleteArgs} args - Arguments to delete one Cohorte.
     * @example
     * // Delete one Cohorte
     * const Cohorte = await prisma.cohorte.delete({
     *   where: {
     *     // ... filter to delete one Cohorte
     *   }
     * })
     * 
    **/
    delete<T extends CohorteDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CohorteDeleteArgs<ExtArgs>>
    ): Prisma__CohorteClient<$Result.GetResult<Prisma.$CohortePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Cohorte.
     * @param {CohorteUpdateArgs} args - Arguments to update one Cohorte.
     * @example
     * // Update one Cohorte
     * const cohorte = await prisma.cohorte.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CohorteUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CohorteUpdateArgs<ExtArgs>>
    ): Prisma__CohorteClient<$Result.GetResult<Prisma.$CohortePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Cohortes.
     * @param {CohorteDeleteManyArgs} args - Arguments to filter Cohortes to delete.
     * @example
     * // Delete a few Cohortes
     * const { count } = await prisma.cohorte.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CohorteDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CohorteDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cohortes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CohorteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cohortes
     * const cohorte = await prisma.cohorte.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CohorteUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CohorteUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cohorte.
     * @param {CohorteUpsertArgs} args - Arguments to update or create a Cohorte.
     * @example
     * // Update or create a Cohorte
     * const cohorte = await prisma.cohorte.upsert({
     *   create: {
     *     // ... data to create a Cohorte
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cohorte we want to update
     *   }
     * })
    **/
    upsert<T extends CohorteUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CohorteUpsertArgs<ExtArgs>>
    ): Prisma__CohorteClient<$Result.GetResult<Prisma.$CohortePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Cohortes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CohorteCountArgs} args - Arguments to filter Cohortes to count.
     * @example
     * // Count the number of Cohortes
     * const count = await prisma.cohorte.count({
     *   where: {
     *     // ... the filter for the Cohortes we want to count
     *   }
     * })
    **/
    count<T extends CohorteCountArgs>(
      args?: Subset<T, CohorteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CohorteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cohorte.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CohorteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CohorteAggregateArgs>(args: Subset<T, CohorteAggregateArgs>): Prisma.PrismaPromise<GetCohorteAggregateType<T>>

    /**
     * Group by Cohorte.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CohorteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CohorteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CohorteGroupByArgs['orderBy'] }
        : { orderBy?: CohorteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CohorteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCohorteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cohorte model
   */
  readonly fields: CohorteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cohorte.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CohorteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    session<T extends SessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SessionDefaultArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Apprenant<T extends Cohorte$ApprenantArgs<ExtArgs> = {}>(args?: Subset<T, Cohorte$ApprenantArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApprenantPayload<ExtArgs>, T, 'findMany'> | Null>;

    Affectation<T extends Cohorte$AffectationArgs<ExtArgs> = {}>(args?: Subset<T, Cohorte$AffectationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AffectationPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Cohorte model
   */ 
  interface CohorteFieldRefs {
    readonly id: FieldRef<"Cohorte", 'Int'>
    readonly code: FieldRef<"Cohorte", 'Int'>
    readonly sessionId: FieldRef<"Cohorte", 'Int'>
    readonly description: FieldRef<"Cohorte", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Cohorte findUnique
   */
  export type CohorteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cohorte
     */
    select?: CohorteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CohorteInclude<ExtArgs> | null
    /**
     * Filter, which Cohorte to fetch.
     */
    where: CohorteWhereUniqueInput
  }


  /**
   * Cohorte findUniqueOrThrow
   */
  export type CohorteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cohorte
     */
    select?: CohorteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CohorteInclude<ExtArgs> | null
    /**
     * Filter, which Cohorte to fetch.
     */
    where: CohorteWhereUniqueInput
  }


  /**
   * Cohorte findFirst
   */
  export type CohorteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cohorte
     */
    select?: CohorteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CohorteInclude<ExtArgs> | null
    /**
     * Filter, which Cohorte to fetch.
     */
    where?: CohorteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cohortes to fetch.
     */
    orderBy?: CohorteOrderByWithRelationInput | CohorteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cohortes.
     */
    cursor?: CohorteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cohortes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cohortes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cohortes.
     */
    distinct?: CohorteScalarFieldEnum | CohorteScalarFieldEnum[]
  }


  /**
   * Cohorte findFirstOrThrow
   */
  export type CohorteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cohorte
     */
    select?: CohorteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CohorteInclude<ExtArgs> | null
    /**
     * Filter, which Cohorte to fetch.
     */
    where?: CohorteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cohortes to fetch.
     */
    orderBy?: CohorteOrderByWithRelationInput | CohorteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cohortes.
     */
    cursor?: CohorteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cohortes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cohortes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cohortes.
     */
    distinct?: CohorteScalarFieldEnum | CohorteScalarFieldEnum[]
  }


  /**
   * Cohorte findMany
   */
  export type CohorteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cohorte
     */
    select?: CohorteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CohorteInclude<ExtArgs> | null
    /**
     * Filter, which Cohortes to fetch.
     */
    where?: CohorteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cohortes to fetch.
     */
    orderBy?: CohorteOrderByWithRelationInput | CohorteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cohortes.
     */
    cursor?: CohorteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cohortes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cohortes.
     */
    skip?: number
    distinct?: CohorteScalarFieldEnum | CohorteScalarFieldEnum[]
  }


  /**
   * Cohorte create
   */
  export type CohorteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cohorte
     */
    select?: CohorteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CohorteInclude<ExtArgs> | null
    /**
     * The data needed to create a Cohorte.
     */
    data: XOR<CohorteCreateInput, CohorteUncheckedCreateInput>
  }


  /**
   * Cohorte update
   */
  export type CohorteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cohorte
     */
    select?: CohorteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CohorteInclude<ExtArgs> | null
    /**
     * The data needed to update a Cohorte.
     */
    data: XOR<CohorteUpdateInput, CohorteUncheckedUpdateInput>
    /**
     * Choose, which Cohorte to update.
     */
    where: CohorteWhereUniqueInput
  }


  /**
   * Cohorte updateMany
   */
  export type CohorteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cohortes.
     */
    data: XOR<CohorteUpdateManyMutationInput, CohorteUncheckedUpdateManyInput>
    /**
     * Filter which Cohortes to update
     */
    where?: CohorteWhereInput
  }


  /**
   * Cohorte upsert
   */
  export type CohorteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cohorte
     */
    select?: CohorteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CohorteInclude<ExtArgs> | null
    /**
     * The filter to search for the Cohorte to update in case it exists.
     */
    where: CohorteWhereUniqueInput
    /**
     * In case the Cohorte found by the `where` argument doesn't exist, create a new Cohorte with this data.
     */
    create: XOR<CohorteCreateInput, CohorteUncheckedCreateInput>
    /**
     * In case the Cohorte was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CohorteUpdateInput, CohorteUncheckedUpdateInput>
  }


  /**
   * Cohorte delete
   */
  export type CohorteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cohorte
     */
    select?: CohorteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CohorteInclude<ExtArgs> | null
    /**
     * Filter which Cohorte to delete.
     */
    where: CohorteWhereUniqueInput
  }


  /**
   * Cohorte deleteMany
   */
  export type CohorteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cohortes to delete
     */
    where?: CohorteWhereInput
  }


  /**
   * Cohorte.Apprenant
   */
  export type Cohorte$ApprenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Apprenant
     */
    select?: ApprenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApprenantInclude<ExtArgs> | null
    where?: ApprenantWhereInput
    orderBy?: ApprenantOrderByWithRelationInput | ApprenantOrderByWithRelationInput[]
    cursor?: ApprenantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApprenantScalarFieldEnum | ApprenantScalarFieldEnum[]
  }


  /**
   * Cohorte.Affectation
   */
  export type Cohorte$AffectationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affectation
     */
    select?: AffectationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AffectationInclude<ExtArgs> | null
    where?: AffectationWhereInput
    orderBy?: AffectationOrderByWithRelationInput | AffectationOrderByWithRelationInput[]
    cursor?: AffectationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AffectationScalarFieldEnum | AffectationScalarFieldEnum[]
  }


  /**
   * Cohorte without action
   */
  export type CohorteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cohorte
     */
    select?: CohorteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CohorteInclude<ExtArgs> | null
  }



  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    id: number | null
    annee: number | null
  }

  export type SessionSumAggregateOutputType = {
    id: number | null
    annee: number | null
  }

  export type SessionMinAggregateOutputType = {
    id: number | null
    annee: number | null
    type: string | null
    ville: string | null
  }

  export type SessionMaxAggregateOutputType = {
    id: number | null
    annee: number | null
    type: string | null
    ville: string | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    annee: number
    type: number
    ville: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    id?: true
    annee?: true
  }

  export type SessionSumAggregateInputType = {
    id?: true
    annee?: true
  }

  export type SessionMinAggregateInputType = {
    id?: true
    annee?: true
    type?: true
    ville?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    annee?: true
    type?: true
    ville?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    annee?: true
    type?: true
    ville?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: number
    annee: number
    type: string
    ville: string
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    annee?: boolean
    type?: boolean
    ville?: boolean
    Cohorte?: boolean | Session$CohorteArgs<ExtArgs>
    _count?: boolean | SessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    annee?: boolean
    type?: boolean
    ville?: boolean
  }

  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Cohorte?: boolean | Session$CohorteArgs<ExtArgs>
    _count?: boolean | SessionCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      Cohorte: Prisma.$CohortePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      annee: number
      type: string
      ville: string
    }, ExtArgs["result"]["session"]>
    composites: {}
  }


  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionCreateArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Cohorte<T extends Session$CohorteArgs<ExtArgs> = {}>(args?: Subset<T, Session$CohorteArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CohortePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Session model
   */ 
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'Int'>
    readonly annee: FieldRef<"Session", 'Int'>
    readonly type: FieldRef<"Session", 'String'>
    readonly ville: FieldRef<"Session", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }


  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }


  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }


  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }


  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }


  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }


  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }


  /**
   * Session.Cohorte
   */
  export type Session$CohorteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cohorte
     */
    select?: CohorteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CohorteInclude<ExtArgs> | null
    where?: CohorteWhereInput
    orderBy?: CohorteOrderByWithRelationInput | CohorteOrderByWithRelationInput[]
    cursor?: CohorteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CohorteScalarFieldEnum | CohorteScalarFieldEnum[]
  }


  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
  }



  /**
   * Model Coach
   */

  export type AggregateCoach = {
    _count: CoachCountAggregateOutputType | null
    _avg: CoachAvgAggregateOutputType | null
    _sum: CoachSumAggregateOutputType | null
    _min: CoachMinAggregateOutputType | null
    _max: CoachMaxAggregateOutputType | null
  }

  export type CoachAvgAggregateOutputType = {
    id: number | null
  }

  export type CoachSumAggregateOutputType = {
    id: number | null
  }

  export type CoachMinAggregateOutputType = {
    id: number | null
    prenom: string | null
    nom: string | null
    postnom: string | null
    date_naissance: Date | null
    adresse: string | null
    email: string | null
    telephone: string | null
    password: string | null
  }

  export type CoachMaxAggregateOutputType = {
    id: number | null
    prenom: string | null
    nom: string | null
    postnom: string | null
    date_naissance: Date | null
    adresse: string | null
    email: string | null
    telephone: string | null
    password: string | null
  }

  export type CoachCountAggregateOutputType = {
    id: number
    prenom: number
    nom: number
    postnom: number
    date_naissance: number
    adresse: number
    email: number
    telephone: number
    password: number
    _all: number
  }


  export type CoachAvgAggregateInputType = {
    id?: true
  }

  export type CoachSumAggregateInputType = {
    id?: true
  }

  export type CoachMinAggregateInputType = {
    id?: true
    prenom?: true
    nom?: true
    postnom?: true
    date_naissance?: true
    adresse?: true
    email?: true
    telephone?: true
    password?: true
  }

  export type CoachMaxAggregateInputType = {
    id?: true
    prenom?: true
    nom?: true
    postnom?: true
    date_naissance?: true
    adresse?: true
    email?: true
    telephone?: true
    password?: true
  }

  export type CoachCountAggregateInputType = {
    id?: true
    prenom?: true
    nom?: true
    postnom?: true
    date_naissance?: true
    adresse?: true
    email?: true
    telephone?: true
    password?: true
    _all?: true
  }

  export type CoachAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Coach to aggregate.
     */
    where?: CoachWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coaches to fetch.
     */
    orderBy?: CoachOrderByWithRelationInput | CoachOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CoachWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coaches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coaches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Coaches
    **/
    _count?: true | CoachCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CoachAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CoachSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoachMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoachMaxAggregateInputType
  }

  export type GetCoachAggregateType<T extends CoachAggregateArgs> = {
        [P in keyof T & keyof AggregateCoach]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCoach[P]>
      : GetScalarType<T[P], AggregateCoach[P]>
  }




  export type CoachGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoachWhereInput
    orderBy?: CoachOrderByWithAggregationInput | CoachOrderByWithAggregationInput[]
    by: CoachScalarFieldEnum[] | CoachScalarFieldEnum
    having?: CoachScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoachCountAggregateInputType | true
    _avg?: CoachAvgAggregateInputType
    _sum?: CoachSumAggregateInputType
    _min?: CoachMinAggregateInputType
    _max?: CoachMaxAggregateInputType
  }

  export type CoachGroupByOutputType = {
    id: number
    prenom: string
    nom: string
    postnom: string
    date_naissance: Date
    adresse: string
    email: string
    telephone: string
    password: string
    _count: CoachCountAggregateOutputType | null
    _avg: CoachAvgAggregateOutputType | null
    _sum: CoachSumAggregateOutputType | null
    _min: CoachMinAggregateOutputType | null
    _max: CoachMaxAggregateOutputType | null
  }

  type GetCoachGroupByPayload<T extends CoachGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoachGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoachGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoachGroupByOutputType[P]>
            : GetScalarType<T[P], CoachGroupByOutputType[P]>
        }
      >
    >


  export type CoachSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    prenom?: boolean
    nom?: boolean
    postnom?: boolean
    date_naissance?: boolean
    adresse?: boolean
    email?: boolean
    telephone?: boolean
    password?: boolean
    Affectation?: boolean | Coach$AffectationArgs<ExtArgs>
    _count?: boolean | CoachCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coach"]>

  export type CoachSelectScalar = {
    id?: boolean
    prenom?: boolean
    nom?: boolean
    postnom?: boolean
    date_naissance?: boolean
    adresse?: boolean
    email?: boolean
    telephone?: boolean
    password?: boolean
  }

  export type CoachInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Affectation?: boolean | Coach$AffectationArgs<ExtArgs>
    _count?: boolean | CoachCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CoachPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Coach"
    objects: {
      Affectation: Prisma.$AffectationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      prenom: string
      nom: string
      postnom: string
      date_naissance: Date
      adresse: string
      email: string
      telephone: string
      password: string
    }, ExtArgs["result"]["coach"]>
    composites: {}
  }


  type CoachGetPayload<S extends boolean | null | undefined | CoachDefaultArgs> = $Result.GetResult<Prisma.$CoachPayload, S>

  type CoachCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CoachFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CoachCountAggregateInputType | true
    }

  export interface CoachDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Coach'], meta: { name: 'Coach' } }
    /**
     * Find zero or one Coach that matches the filter.
     * @param {CoachFindUniqueArgs} args - Arguments to find a Coach
     * @example
     * // Get one Coach
     * const coach = await prisma.coach.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CoachFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CoachFindUniqueArgs<ExtArgs>>
    ): Prisma__CoachClient<$Result.GetResult<Prisma.$CoachPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Coach that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CoachFindUniqueOrThrowArgs} args - Arguments to find a Coach
     * @example
     * // Get one Coach
     * const coach = await prisma.coach.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CoachFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CoachFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CoachClient<$Result.GetResult<Prisma.$CoachPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Coach that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoachFindFirstArgs} args - Arguments to find a Coach
     * @example
     * // Get one Coach
     * const coach = await prisma.coach.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CoachFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CoachFindFirstArgs<ExtArgs>>
    ): Prisma__CoachClient<$Result.GetResult<Prisma.$CoachPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Coach that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoachFindFirstOrThrowArgs} args - Arguments to find a Coach
     * @example
     * // Get one Coach
     * const coach = await prisma.coach.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CoachFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CoachFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CoachClient<$Result.GetResult<Prisma.$CoachPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Coaches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoachFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Coaches
     * const coaches = await prisma.coach.findMany()
     * 
     * // Get first 10 Coaches
     * const coaches = await prisma.coach.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coachWithIdOnly = await prisma.coach.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CoachFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CoachFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoachPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Coach.
     * @param {CoachCreateArgs} args - Arguments to create a Coach.
     * @example
     * // Create one Coach
     * const Coach = await prisma.coach.create({
     *   data: {
     *     // ... data to create a Coach
     *   }
     * })
     * 
    **/
    create<T extends CoachCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CoachCreateArgs<ExtArgs>>
    ): Prisma__CoachClient<$Result.GetResult<Prisma.$CoachPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Coach.
     * @param {CoachDeleteArgs} args - Arguments to delete one Coach.
     * @example
     * // Delete one Coach
     * const Coach = await prisma.coach.delete({
     *   where: {
     *     // ... filter to delete one Coach
     *   }
     * })
     * 
    **/
    delete<T extends CoachDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CoachDeleteArgs<ExtArgs>>
    ): Prisma__CoachClient<$Result.GetResult<Prisma.$CoachPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Coach.
     * @param {CoachUpdateArgs} args - Arguments to update one Coach.
     * @example
     * // Update one Coach
     * const coach = await prisma.coach.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CoachUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CoachUpdateArgs<ExtArgs>>
    ): Prisma__CoachClient<$Result.GetResult<Prisma.$CoachPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Coaches.
     * @param {CoachDeleteManyArgs} args - Arguments to filter Coaches to delete.
     * @example
     * // Delete a few Coaches
     * const { count } = await prisma.coach.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CoachDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CoachDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Coaches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoachUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Coaches
     * const coach = await prisma.coach.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CoachUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CoachUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Coach.
     * @param {CoachUpsertArgs} args - Arguments to update or create a Coach.
     * @example
     * // Update or create a Coach
     * const coach = await prisma.coach.upsert({
     *   create: {
     *     // ... data to create a Coach
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Coach we want to update
     *   }
     * })
    **/
    upsert<T extends CoachUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CoachUpsertArgs<ExtArgs>>
    ): Prisma__CoachClient<$Result.GetResult<Prisma.$CoachPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Coaches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoachCountArgs} args - Arguments to filter Coaches to count.
     * @example
     * // Count the number of Coaches
     * const count = await prisma.coach.count({
     *   where: {
     *     // ... the filter for the Coaches we want to count
     *   }
     * })
    **/
    count<T extends CoachCountArgs>(
      args?: Subset<T, CoachCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoachCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Coach.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoachAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoachAggregateArgs>(args: Subset<T, CoachAggregateArgs>): Prisma.PrismaPromise<GetCoachAggregateType<T>>

    /**
     * Group by Coach.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoachGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CoachGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CoachGroupByArgs['orderBy'] }
        : { orderBy?: CoachGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CoachGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoachGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Coach model
   */
  readonly fields: CoachFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Coach.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CoachClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Affectation<T extends Coach$AffectationArgs<ExtArgs> = {}>(args?: Subset<T, Coach$AffectationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AffectationPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Coach model
   */ 
  interface CoachFieldRefs {
    readonly id: FieldRef<"Coach", 'Int'>
    readonly prenom: FieldRef<"Coach", 'String'>
    readonly nom: FieldRef<"Coach", 'String'>
    readonly postnom: FieldRef<"Coach", 'String'>
    readonly date_naissance: FieldRef<"Coach", 'DateTime'>
    readonly adresse: FieldRef<"Coach", 'String'>
    readonly email: FieldRef<"Coach", 'String'>
    readonly telephone: FieldRef<"Coach", 'String'>
    readonly password: FieldRef<"Coach", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Coach findUnique
   */
  export type CoachFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoachInclude<ExtArgs> | null
    /**
     * Filter, which Coach to fetch.
     */
    where: CoachWhereUniqueInput
  }


  /**
   * Coach findUniqueOrThrow
   */
  export type CoachFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoachInclude<ExtArgs> | null
    /**
     * Filter, which Coach to fetch.
     */
    where: CoachWhereUniqueInput
  }


  /**
   * Coach findFirst
   */
  export type CoachFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoachInclude<ExtArgs> | null
    /**
     * Filter, which Coach to fetch.
     */
    where?: CoachWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coaches to fetch.
     */
    orderBy?: CoachOrderByWithRelationInput | CoachOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Coaches.
     */
    cursor?: CoachWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coaches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coaches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Coaches.
     */
    distinct?: CoachScalarFieldEnum | CoachScalarFieldEnum[]
  }


  /**
   * Coach findFirstOrThrow
   */
  export type CoachFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoachInclude<ExtArgs> | null
    /**
     * Filter, which Coach to fetch.
     */
    where?: CoachWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coaches to fetch.
     */
    orderBy?: CoachOrderByWithRelationInput | CoachOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Coaches.
     */
    cursor?: CoachWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coaches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coaches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Coaches.
     */
    distinct?: CoachScalarFieldEnum | CoachScalarFieldEnum[]
  }


  /**
   * Coach findMany
   */
  export type CoachFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoachInclude<ExtArgs> | null
    /**
     * Filter, which Coaches to fetch.
     */
    where?: CoachWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coaches to fetch.
     */
    orderBy?: CoachOrderByWithRelationInput | CoachOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Coaches.
     */
    cursor?: CoachWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coaches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coaches.
     */
    skip?: number
    distinct?: CoachScalarFieldEnum | CoachScalarFieldEnum[]
  }


  /**
   * Coach create
   */
  export type CoachCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoachInclude<ExtArgs> | null
    /**
     * The data needed to create a Coach.
     */
    data: XOR<CoachCreateInput, CoachUncheckedCreateInput>
  }


  /**
   * Coach update
   */
  export type CoachUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoachInclude<ExtArgs> | null
    /**
     * The data needed to update a Coach.
     */
    data: XOR<CoachUpdateInput, CoachUncheckedUpdateInput>
    /**
     * Choose, which Coach to update.
     */
    where: CoachWhereUniqueInput
  }


  /**
   * Coach updateMany
   */
  export type CoachUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Coaches.
     */
    data: XOR<CoachUpdateManyMutationInput, CoachUncheckedUpdateManyInput>
    /**
     * Filter which Coaches to update
     */
    where?: CoachWhereInput
  }


  /**
   * Coach upsert
   */
  export type CoachUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoachInclude<ExtArgs> | null
    /**
     * The filter to search for the Coach to update in case it exists.
     */
    where: CoachWhereUniqueInput
    /**
     * In case the Coach found by the `where` argument doesn't exist, create a new Coach with this data.
     */
    create: XOR<CoachCreateInput, CoachUncheckedCreateInput>
    /**
     * In case the Coach was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CoachUpdateInput, CoachUncheckedUpdateInput>
  }


  /**
   * Coach delete
   */
  export type CoachDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoachInclude<ExtArgs> | null
    /**
     * Filter which Coach to delete.
     */
    where: CoachWhereUniqueInput
  }


  /**
   * Coach deleteMany
   */
  export type CoachDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Coaches to delete
     */
    where?: CoachWhereInput
  }


  /**
   * Coach.Affectation
   */
  export type Coach$AffectationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affectation
     */
    select?: AffectationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AffectationInclude<ExtArgs> | null
    where?: AffectationWhereInput
    orderBy?: AffectationOrderByWithRelationInput | AffectationOrderByWithRelationInput[]
    cursor?: AffectationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AffectationScalarFieldEnum | AffectationScalarFieldEnum[]
  }


  /**
   * Coach without action
   */
  export type CoachDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoachInclude<ExtArgs> | null
  }



  /**
   * Model Affectation
   */

  export type AggregateAffectation = {
    _count: AffectationCountAggregateOutputType | null
    _avg: AffectationAvgAggregateOutputType | null
    _sum: AffectationSumAggregateOutputType | null
    _min: AffectationMinAggregateOutputType | null
    _max: AffectationMaxAggregateOutputType | null
  }

  export type AffectationAvgAggregateOutputType = {
    id: number | null
    coachId: number | null
    cohorteId: number | null
  }

  export type AffectationSumAggregateOutputType = {
    id: number | null
    coachId: number | null
    cohorteId: number | null
  }

  export type AffectationMinAggregateOutputType = {
    id: number | null
    coachId: number | null
    cohorteId: number | null
  }

  export type AffectationMaxAggregateOutputType = {
    id: number | null
    coachId: number | null
    cohorteId: number | null
  }

  export type AffectationCountAggregateOutputType = {
    id: number
    coachId: number
    cohorteId: number
    _all: number
  }


  export type AffectationAvgAggregateInputType = {
    id?: true
    coachId?: true
    cohorteId?: true
  }

  export type AffectationSumAggregateInputType = {
    id?: true
    coachId?: true
    cohorteId?: true
  }

  export type AffectationMinAggregateInputType = {
    id?: true
    coachId?: true
    cohorteId?: true
  }

  export type AffectationMaxAggregateInputType = {
    id?: true
    coachId?: true
    cohorteId?: true
  }

  export type AffectationCountAggregateInputType = {
    id?: true
    coachId?: true
    cohorteId?: true
    _all?: true
  }

  export type AffectationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Affectation to aggregate.
     */
    where?: AffectationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Affectations to fetch.
     */
    orderBy?: AffectationOrderByWithRelationInput | AffectationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AffectationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Affectations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Affectations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Affectations
    **/
    _count?: true | AffectationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AffectationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AffectationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AffectationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AffectationMaxAggregateInputType
  }

  export type GetAffectationAggregateType<T extends AffectationAggregateArgs> = {
        [P in keyof T & keyof AggregateAffectation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAffectation[P]>
      : GetScalarType<T[P], AggregateAffectation[P]>
  }




  export type AffectationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AffectationWhereInput
    orderBy?: AffectationOrderByWithAggregationInput | AffectationOrderByWithAggregationInput[]
    by: AffectationScalarFieldEnum[] | AffectationScalarFieldEnum
    having?: AffectationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AffectationCountAggregateInputType | true
    _avg?: AffectationAvgAggregateInputType
    _sum?: AffectationSumAggregateInputType
    _min?: AffectationMinAggregateInputType
    _max?: AffectationMaxAggregateInputType
  }

  export type AffectationGroupByOutputType = {
    id: number
    coachId: number
    cohorteId: number
    _count: AffectationCountAggregateOutputType | null
    _avg: AffectationAvgAggregateOutputType | null
    _sum: AffectationSumAggregateOutputType | null
    _min: AffectationMinAggregateOutputType | null
    _max: AffectationMaxAggregateOutputType | null
  }

  type GetAffectationGroupByPayload<T extends AffectationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AffectationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AffectationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AffectationGroupByOutputType[P]>
            : GetScalarType<T[P], AffectationGroupByOutputType[P]>
        }
      >
    >


  export type AffectationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    coachId?: boolean
    cohorteId?: boolean
    coach?: boolean | CoachDefaultArgs<ExtArgs>
    cohorte?: boolean | CohorteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["affectation"]>

  export type AffectationSelectScalar = {
    id?: boolean
    coachId?: boolean
    cohorteId?: boolean
  }

  export type AffectationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coach?: boolean | CoachDefaultArgs<ExtArgs>
    cohorte?: boolean | CohorteDefaultArgs<ExtArgs>
  }


  export type $AffectationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Affectation"
    objects: {
      coach: Prisma.$CoachPayload<ExtArgs>
      cohorte: Prisma.$CohortePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      coachId: number
      cohorteId: number
    }, ExtArgs["result"]["affectation"]>
    composites: {}
  }


  type AffectationGetPayload<S extends boolean | null | undefined | AffectationDefaultArgs> = $Result.GetResult<Prisma.$AffectationPayload, S>

  type AffectationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AffectationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AffectationCountAggregateInputType | true
    }

  export interface AffectationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Affectation'], meta: { name: 'Affectation' } }
    /**
     * Find zero or one Affectation that matches the filter.
     * @param {AffectationFindUniqueArgs} args - Arguments to find a Affectation
     * @example
     * // Get one Affectation
     * const affectation = await prisma.affectation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AffectationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AffectationFindUniqueArgs<ExtArgs>>
    ): Prisma__AffectationClient<$Result.GetResult<Prisma.$AffectationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Affectation that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AffectationFindUniqueOrThrowArgs} args - Arguments to find a Affectation
     * @example
     * // Get one Affectation
     * const affectation = await prisma.affectation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AffectationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AffectationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AffectationClient<$Result.GetResult<Prisma.$AffectationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Affectation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffectationFindFirstArgs} args - Arguments to find a Affectation
     * @example
     * // Get one Affectation
     * const affectation = await prisma.affectation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AffectationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AffectationFindFirstArgs<ExtArgs>>
    ): Prisma__AffectationClient<$Result.GetResult<Prisma.$AffectationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Affectation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffectationFindFirstOrThrowArgs} args - Arguments to find a Affectation
     * @example
     * // Get one Affectation
     * const affectation = await prisma.affectation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AffectationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AffectationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AffectationClient<$Result.GetResult<Prisma.$AffectationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Affectations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffectationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Affectations
     * const affectations = await prisma.affectation.findMany()
     * 
     * // Get first 10 Affectations
     * const affectations = await prisma.affectation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const affectationWithIdOnly = await prisma.affectation.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AffectationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AffectationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AffectationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Affectation.
     * @param {AffectationCreateArgs} args - Arguments to create a Affectation.
     * @example
     * // Create one Affectation
     * const Affectation = await prisma.affectation.create({
     *   data: {
     *     // ... data to create a Affectation
     *   }
     * })
     * 
    **/
    create<T extends AffectationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AffectationCreateArgs<ExtArgs>>
    ): Prisma__AffectationClient<$Result.GetResult<Prisma.$AffectationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Affectation.
     * @param {AffectationDeleteArgs} args - Arguments to delete one Affectation.
     * @example
     * // Delete one Affectation
     * const Affectation = await prisma.affectation.delete({
     *   where: {
     *     // ... filter to delete one Affectation
     *   }
     * })
     * 
    **/
    delete<T extends AffectationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AffectationDeleteArgs<ExtArgs>>
    ): Prisma__AffectationClient<$Result.GetResult<Prisma.$AffectationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Affectation.
     * @param {AffectationUpdateArgs} args - Arguments to update one Affectation.
     * @example
     * // Update one Affectation
     * const affectation = await prisma.affectation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AffectationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AffectationUpdateArgs<ExtArgs>>
    ): Prisma__AffectationClient<$Result.GetResult<Prisma.$AffectationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Affectations.
     * @param {AffectationDeleteManyArgs} args - Arguments to filter Affectations to delete.
     * @example
     * // Delete a few Affectations
     * const { count } = await prisma.affectation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AffectationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AffectationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Affectations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffectationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Affectations
     * const affectation = await prisma.affectation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AffectationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AffectationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Affectation.
     * @param {AffectationUpsertArgs} args - Arguments to update or create a Affectation.
     * @example
     * // Update or create a Affectation
     * const affectation = await prisma.affectation.upsert({
     *   create: {
     *     // ... data to create a Affectation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Affectation we want to update
     *   }
     * })
    **/
    upsert<T extends AffectationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AffectationUpsertArgs<ExtArgs>>
    ): Prisma__AffectationClient<$Result.GetResult<Prisma.$AffectationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Affectations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffectationCountArgs} args - Arguments to filter Affectations to count.
     * @example
     * // Count the number of Affectations
     * const count = await prisma.affectation.count({
     *   where: {
     *     // ... the filter for the Affectations we want to count
     *   }
     * })
    **/
    count<T extends AffectationCountArgs>(
      args?: Subset<T, AffectationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AffectationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Affectation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffectationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AffectationAggregateArgs>(args: Subset<T, AffectationAggregateArgs>): Prisma.PrismaPromise<GetAffectationAggregateType<T>>

    /**
     * Group by Affectation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffectationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AffectationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AffectationGroupByArgs['orderBy'] }
        : { orderBy?: AffectationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AffectationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAffectationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Affectation model
   */
  readonly fields: AffectationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Affectation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AffectationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    coach<T extends CoachDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CoachDefaultArgs<ExtArgs>>): Prisma__CoachClient<$Result.GetResult<Prisma.$CoachPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    cohorte<T extends CohorteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CohorteDefaultArgs<ExtArgs>>): Prisma__CohorteClient<$Result.GetResult<Prisma.$CohortePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Affectation model
   */ 
  interface AffectationFieldRefs {
    readonly id: FieldRef<"Affectation", 'Int'>
    readonly coachId: FieldRef<"Affectation", 'Int'>
    readonly cohorteId: FieldRef<"Affectation", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Affectation findUnique
   */
  export type AffectationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affectation
     */
    select?: AffectationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AffectationInclude<ExtArgs> | null
    /**
     * Filter, which Affectation to fetch.
     */
    where: AffectationWhereUniqueInput
  }


  /**
   * Affectation findUniqueOrThrow
   */
  export type AffectationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affectation
     */
    select?: AffectationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AffectationInclude<ExtArgs> | null
    /**
     * Filter, which Affectation to fetch.
     */
    where: AffectationWhereUniqueInput
  }


  /**
   * Affectation findFirst
   */
  export type AffectationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affectation
     */
    select?: AffectationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AffectationInclude<ExtArgs> | null
    /**
     * Filter, which Affectation to fetch.
     */
    where?: AffectationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Affectations to fetch.
     */
    orderBy?: AffectationOrderByWithRelationInput | AffectationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Affectations.
     */
    cursor?: AffectationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Affectations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Affectations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Affectations.
     */
    distinct?: AffectationScalarFieldEnum | AffectationScalarFieldEnum[]
  }


  /**
   * Affectation findFirstOrThrow
   */
  export type AffectationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affectation
     */
    select?: AffectationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AffectationInclude<ExtArgs> | null
    /**
     * Filter, which Affectation to fetch.
     */
    where?: AffectationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Affectations to fetch.
     */
    orderBy?: AffectationOrderByWithRelationInput | AffectationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Affectations.
     */
    cursor?: AffectationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Affectations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Affectations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Affectations.
     */
    distinct?: AffectationScalarFieldEnum | AffectationScalarFieldEnum[]
  }


  /**
   * Affectation findMany
   */
  export type AffectationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affectation
     */
    select?: AffectationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AffectationInclude<ExtArgs> | null
    /**
     * Filter, which Affectations to fetch.
     */
    where?: AffectationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Affectations to fetch.
     */
    orderBy?: AffectationOrderByWithRelationInput | AffectationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Affectations.
     */
    cursor?: AffectationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Affectations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Affectations.
     */
    skip?: number
    distinct?: AffectationScalarFieldEnum | AffectationScalarFieldEnum[]
  }


  /**
   * Affectation create
   */
  export type AffectationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affectation
     */
    select?: AffectationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AffectationInclude<ExtArgs> | null
    /**
     * The data needed to create a Affectation.
     */
    data: XOR<AffectationCreateInput, AffectationUncheckedCreateInput>
  }


  /**
   * Affectation update
   */
  export type AffectationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affectation
     */
    select?: AffectationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AffectationInclude<ExtArgs> | null
    /**
     * The data needed to update a Affectation.
     */
    data: XOR<AffectationUpdateInput, AffectationUncheckedUpdateInput>
    /**
     * Choose, which Affectation to update.
     */
    where: AffectationWhereUniqueInput
  }


  /**
   * Affectation updateMany
   */
  export type AffectationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Affectations.
     */
    data: XOR<AffectationUpdateManyMutationInput, AffectationUncheckedUpdateManyInput>
    /**
     * Filter which Affectations to update
     */
    where?: AffectationWhereInput
  }


  /**
   * Affectation upsert
   */
  export type AffectationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affectation
     */
    select?: AffectationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AffectationInclude<ExtArgs> | null
    /**
     * The filter to search for the Affectation to update in case it exists.
     */
    where: AffectationWhereUniqueInput
    /**
     * In case the Affectation found by the `where` argument doesn't exist, create a new Affectation with this data.
     */
    create: XOR<AffectationCreateInput, AffectationUncheckedCreateInput>
    /**
     * In case the Affectation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AffectationUpdateInput, AffectationUncheckedUpdateInput>
  }


  /**
   * Affectation delete
   */
  export type AffectationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affectation
     */
    select?: AffectationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AffectationInclude<ExtArgs> | null
    /**
     * Filter which Affectation to delete.
     */
    where: AffectationWhereUniqueInput
  }


  /**
   * Affectation deleteMany
   */
  export type AffectationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Affectations to delete
     */
    where?: AffectationWhereInput
  }


  /**
   * Affectation without action
   */
  export type AffectationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affectation
     */
    select?: AffectationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AffectationInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ApprenantScalarFieldEnum: {
    id: 'id',
    ordinateurId: 'ordinateurId',
    cohorteId: 'cohorteId',
    prenom: 'prenom',
    nom: 'nom',
    postnom: 'postnom',
    date_naissance: 'date_naissance',
    adresse: 'adresse',
    email: 'email',
    telephone: 'telephone',
    password: 'password'
  };

  export type ApprenantScalarFieldEnum = (typeof ApprenantScalarFieldEnum)[keyof typeof ApprenantScalarFieldEnum]


  export const OrdinateurScalarFieldEnum: {
    id: 'id',
    tag: 'tag',
    modele: 'modele',
    fabriquant: 'fabriquant'
  };

  export type OrdinateurScalarFieldEnum = (typeof OrdinateurScalarFieldEnum)[keyof typeof OrdinateurScalarFieldEnum]


  export const CohorteScalarFieldEnum: {
    id: 'id',
    code: 'code',
    sessionId: 'sessionId',
    description: 'description'
  };

  export type CohorteScalarFieldEnum = (typeof CohorteScalarFieldEnum)[keyof typeof CohorteScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    annee: 'annee',
    type: 'type',
    ville: 'ville'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const CoachScalarFieldEnum: {
    id: 'id',
    prenom: 'prenom',
    nom: 'nom',
    postnom: 'postnom',
    date_naissance: 'date_naissance',
    adresse: 'adresse',
    email: 'email',
    telephone: 'telephone',
    password: 'password'
  };

  export type CoachScalarFieldEnum = (typeof CoachScalarFieldEnum)[keyof typeof CoachScalarFieldEnum]


  export const AffectationScalarFieldEnum: {
    id: 'id',
    coachId: 'coachId',
    cohorteId: 'cohorteId'
  };

  export type AffectationScalarFieldEnum = (typeof AffectationScalarFieldEnum)[keyof typeof AffectationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type ApprenantWhereInput = {
    AND?: ApprenantWhereInput | ApprenantWhereInput[]
    OR?: ApprenantWhereInput[]
    NOT?: ApprenantWhereInput | ApprenantWhereInput[]
    id?: IntFilter<"Apprenant"> | number
    ordinateurId?: IntFilter<"Apprenant"> | number
    cohorteId?: IntFilter<"Apprenant"> | number
    prenom?: StringFilter<"Apprenant"> | string
    nom?: StringFilter<"Apprenant"> | string
    postnom?: StringFilter<"Apprenant"> | string
    date_naissance?: DateTimeFilter<"Apprenant"> | Date | string
    adresse?: StringFilter<"Apprenant"> | string
    email?: StringFilter<"Apprenant"> | string
    telephone?: StringFilter<"Apprenant"> | string
    password?: StringFilter<"Apprenant"> | string
    ordinateur?: XOR<OrdinateurRelationFilter, OrdinateurWhereInput>
    cohorte?: XOR<CohorteRelationFilter, CohorteWhereInput>
  }

  export type ApprenantOrderByWithRelationInput = {
    id?: SortOrder
    ordinateurId?: SortOrder
    cohorteId?: SortOrder
    prenom?: SortOrder
    nom?: SortOrder
    postnom?: SortOrder
    date_naissance?: SortOrder
    adresse?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    password?: SortOrder
    ordinateur?: OrdinateurOrderByWithRelationInput
    cohorte?: CohorteOrderByWithRelationInput
  }

  export type ApprenantWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: ApprenantWhereInput | ApprenantWhereInput[]
    OR?: ApprenantWhereInput[]
    NOT?: ApprenantWhereInput | ApprenantWhereInput[]
    ordinateurId?: IntFilter<"Apprenant"> | number
    cohorteId?: IntFilter<"Apprenant"> | number
    prenom?: StringFilter<"Apprenant"> | string
    nom?: StringFilter<"Apprenant"> | string
    postnom?: StringFilter<"Apprenant"> | string
    date_naissance?: DateTimeFilter<"Apprenant"> | Date | string
    adresse?: StringFilter<"Apprenant"> | string
    telephone?: StringFilter<"Apprenant"> | string
    password?: StringFilter<"Apprenant"> | string
    ordinateur?: XOR<OrdinateurRelationFilter, OrdinateurWhereInput>
    cohorte?: XOR<CohorteRelationFilter, CohorteWhereInput>
  }, "id" | "email">

  export type ApprenantOrderByWithAggregationInput = {
    id?: SortOrder
    ordinateurId?: SortOrder
    cohorteId?: SortOrder
    prenom?: SortOrder
    nom?: SortOrder
    postnom?: SortOrder
    date_naissance?: SortOrder
    adresse?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    password?: SortOrder
    _count?: ApprenantCountOrderByAggregateInput
    _avg?: ApprenantAvgOrderByAggregateInput
    _max?: ApprenantMaxOrderByAggregateInput
    _min?: ApprenantMinOrderByAggregateInput
    _sum?: ApprenantSumOrderByAggregateInput
  }

  export type ApprenantScalarWhereWithAggregatesInput = {
    AND?: ApprenantScalarWhereWithAggregatesInput | ApprenantScalarWhereWithAggregatesInput[]
    OR?: ApprenantScalarWhereWithAggregatesInput[]
    NOT?: ApprenantScalarWhereWithAggregatesInput | ApprenantScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Apprenant"> | number
    ordinateurId?: IntWithAggregatesFilter<"Apprenant"> | number
    cohorteId?: IntWithAggregatesFilter<"Apprenant"> | number
    prenom?: StringWithAggregatesFilter<"Apprenant"> | string
    nom?: StringWithAggregatesFilter<"Apprenant"> | string
    postnom?: StringWithAggregatesFilter<"Apprenant"> | string
    date_naissance?: DateTimeWithAggregatesFilter<"Apprenant"> | Date | string
    adresse?: StringWithAggregatesFilter<"Apprenant"> | string
    email?: StringWithAggregatesFilter<"Apprenant"> | string
    telephone?: StringWithAggregatesFilter<"Apprenant"> | string
    password?: StringWithAggregatesFilter<"Apprenant"> | string
  }

  export type OrdinateurWhereInput = {
    AND?: OrdinateurWhereInput | OrdinateurWhereInput[]
    OR?: OrdinateurWhereInput[]
    NOT?: OrdinateurWhereInput | OrdinateurWhereInput[]
    id?: IntFilter<"Ordinateur"> | number
    tag?: StringFilter<"Ordinateur"> | string
    modele?: StringFilter<"Ordinateur"> | string
    fabriquant?: StringFilter<"Ordinateur"> | string
    Apprenant?: ApprenantListRelationFilter
  }

  export type OrdinateurOrderByWithRelationInput = {
    id?: SortOrder
    tag?: SortOrder
    modele?: SortOrder
    fabriquant?: SortOrder
    Apprenant?: ApprenantOrderByRelationAggregateInput
  }

  export type OrdinateurWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    tag?: string
    AND?: OrdinateurWhereInput | OrdinateurWhereInput[]
    OR?: OrdinateurWhereInput[]
    NOT?: OrdinateurWhereInput | OrdinateurWhereInput[]
    modele?: StringFilter<"Ordinateur"> | string
    fabriquant?: StringFilter<"Ordinateur"> | string
    Apprenant?: ApprenantListRelationFilter
  }, "id" | "tag">

  export type OrdinateurOrderByWithAggregationInput = {
    id?: SortOrder
    tag?: SortOrder
    modele?: SortOrder
    fabriquant?: SortOrder
    _count?: OrdinateurCountOrderByAggregateInput
    _avg?: OrdinateurAvgOrderByAggregateInput
    _max?: OrdinateurMaxOrderByAggregateInput
    _min?: OrdinateurMinOrderByAggregateInput
    _sum?: OrdinateurSumOrderByAggregateInput
  }

  export type OrdinateurScalarWhereWithAggregatesInput = {
    AND?: OrdinateurScalarWhereWithAggregatesInput | OrdinateurScalarWhereWithAggregatesInput[]
    OR?: OrdinateurScalarWhereWithAggregatesInput[]
    NOT?: OrdinateurScalarWhereWithAggregatesInput | OrdinateurScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Ordinateur"> | number
    tag?: StringWithAggregatesFilter<"Ordinateur"> | string
    modele?: StringWithAggregatesFilter<"Ordinateur"> | string
    fabriquant?: StringWithAggregatesFilter<"Ordinateur"> | string
  }

  export type CohorteWhereInput = {
    AND?: CohorteWhereInput | CohorteWhereInput[]
    OR?: CohorteWhereInput[]
    NOT?: CohorteWhereInput | CohorteWhereInput[]
    id?: IntFilter<"Cohorte"> | number
    code?: IntFilter<"Cohorte"> | number
    sessionId?: IntFilter<"Cohorte"> | number
    description?: StringFilter<"Cohorte"> | string
    session?: XOR<SessionRelationFilter, SessionWhereInput>
    Apprenant?: ApprenantListRelationFilter
    Affectation?: AffectationListRelationFilter
  }

  export type CohorteOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    sessionId?: SortOrder
    description?: SortOrder
    session?: SessionOrderByWithRelationInput
    Apprenant?: ApprenantOrderByRelationAggregateInput
    Affectation?: AffectationOrderByRelationAggregateInput
  }

  export type CohorteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: number
    AND?: CohorteWhereInput | CohorteWhereInput[]
    OR?: CohorteWhereInput[]
    NOT?: CohorteWhereInput | CohorteWhereInput[]
    sessionId?: IntFilter<"Cohorte"> | number
    description?: StringFilter<"Cohorte"> | string
    session?: XOR<SessionRelationFilter, SessionWhereInput>
    Apprenant?: ApprenantListRelationFilter
    Affectation?: AffectationListRelationFilter
  }, "id" | "code">

  export type CohorteOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    sessionId?: SortOrder
    description?: SortOrder
    _count?: CohorteCountOrderByAggregateInput
    _avg?: CohorteAvgOrderByAggregateInput
    _max?: CohorteMaxOrderByAggregateInput
    _min?: CohorteMinOrderByAggregateInput
    _sum?: CohorteSumOrderByAggregateInput
  }

  export type CohorteScalarWhereWithAggregatesInput = {
    AND?: CohorteScalarWhereWithAggregatesInput | CohorteScalarWhereWithAggregatesInput[]
    OR?: CohorteScalarWhereWithAggregatesInput[]
    NOT?: CohorteScalarWhereWithAggregatesInput | CohorteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Cohorte"> | number
    code?: IntWithAggregatesFilter<"Cohorte"> | number
    sessionId?: IntWithAggregatesFilter<"Cohorte"> | number
    description?: StringWithAggregatesFilter<"Cohorte"> | string
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: IntFilter<"Session"> | number
    annee?: IntFilter<"Session"> | number
    type?: StringFilter<"Session"> | string
    ville?: StringFilter<"Session"> | string
    Cohorte?: CohorteListRelationFilter
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    annee?: SortOrder
    type?: SortOrder
    ville?: SortOrder
    Cohorte?: CohorteOrderByRelationAggregateInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    annee?: IntFilter<"Session"> | number
    type?: StringFilter<"Session"> | string
    ville?: StringFilter<"Session"> | string
    Cohorte?: CohorteListRelationFilter
  }, "id">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    annee?: SortOrder
    type?: SortOrder
    ville?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Session"> | number
    annee?: IntWithAggregatesFilter<"Session"> | number
    type?: StringWithAggregatesFilter<"Session"> | string
    ville?: StringWithAggregatesFilter<"Session"> | string
  }

  export type CoachWhereInput = {
    AND?: CoachWhereInput | CoachWhereInput[]
    OR?: CoachWhereInput[]
    NOT?: CoachWhereInput | CoachWhereInput[]
    id?: IntFilter<"Coach"> | number
    prenom?: StringFilter<"Coach"> | string
    nom?: StringFilter<"Coach"> | string
    postnom?: StringFilter<"Coach"> | string
    date_naissance?: DateTimeFilter<"Coach"> | Date | string
    adresse?: StringFilter<"Coach"> | string
    email?: StringFilter<"Coach"> | string
    telephone?: StringFilter<"Coach"> | string
    password?: StringFilter<"Coach"> | string
    Affectation?: AffectationListRelationFilter
  }

  export type CoachOrderByWithRelationInput = {
    id?: SortOrder
    prenom?: SortOrder
    nom?: SortOrder
    postnom?: SortOrder
    date_naissance?: SortOrder
    adresse?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    password?: SortOrder
    Affectation?: AffectationOrderByRelationAggregateInput
  }

  export type CoachWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: CoachWhereInput | CoachWhereInput[]
    OR?: CoachWhereInput[]
    NOT?: CoachWhereInput | CoachWhereInput[]
    prenom?: StringFilter<"Coach"> | string
    nom?: StringFilter<"Coach"> | string
    postnom?: StringFilter<"Coach"> | string
    date_naissance?: DateTimeFilter<"Coach"> | Date | string
    adresse?: StringFilter<"Coach"> | string
    telephone?: StringFilter<"Coach"> | string
    password?: StringFilter<"Coach"> | string
    Affectation?: AffectationListRelationFilter
  }, "id" | "email">

  export type CoachOrderByWithAggregationInput = {
    id?: SortOrder
    prenom?: SortOrder
    nom?: SortOrder
    postnom?: SortOrder
    date_naissance?: SortOrder
    adresse?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    password?: SortOrder
    _count?: CoachCountOrderByAggregateInput
    _avg?: CoachAvgOrderByAggregateInput
    _max?: CoachMaxOrderByAggregateInput
    _min?: CoachMinOrderByAggregateInput
    _sum?: CoachSumOrderByAggregateInput
  }

  export type CoachScalarWhereWithAggregatesInput = {
    AND?: CoachScalarWhereWithAggregatesInput | CoachScalarWhereWithAggregatesInput[]
    OR?: CoachScalarWhereWithAggregatesInput[]
    NOT?: CoachScalarWhereWithAggregatesInput | CoachScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Coach"> | number
    prenom?: StringWithAggregatesFilter<"Coach"> | string
    nom?: StringWithAggregatesFilter<"Coach"> | string
    postnom?: StringWithAggregatesFilter<"Coach"> | string
    date_naissance?: DateTimeWithAggregatesFilter<"Coach"> | Date | string
    adresse?: StringWithAggregatesFilter<"Coach"> | string
    email?: StringWithAggregatesFilter<"Coach"> | string
    telephone?: StringWithAggregatesFilter<"Coach"> | string
    password?: StringWithAggregatesFilter<"Coach"> | string
  }

  export type AffectationWhereInput = {
    AND?: AffectationWhereInput | AffectationWhereInput[]
    OR?: AffectationWhereInput[]
    NOT?: AffectationWhereInput | AffectationWhereInput[]
    id?: IntFilter<"Affectation"> | number
    coachId?: IntFilter<"Affectation"> | number
    cohorteId?: IntFilter<"Affectation"> | number
    coach?: XOR<CoachRelationFilter, CoachWhereInput>
    cohorte?: XOR<CohorteRelationFilter, CohorteWhereInput>
  }

  export type AffectationOrderByWithRelationInput = {
    id?: SortOrder
    coachId?: SortOrder
    cohorteId?: SortOrder
    coach?: CoachOrderByWithRelationInput
    cohorte?: CohorteOrderByWithRelationInput
  }

  export type AffectationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AffectationWhereInput | AffectationWhereInput[]
    OR?: AffectationWhereInput[]
    NOT?: AffectationWhereInput | AffectationWhereInput[]
    coachId?: IntFilter<"Affectation"> | number
    cohorteId?: IntFilter<"Affectation"> | number
    coach?: XOR<CoachRelationFilter, CoachWhereInput>
    cohorte?: XOR<CohorteRelationFilter, CohorteWhereInput>
  }, "id">

  export type AffectationOrderByWithAggregationInput = {
    id?: SortOrder
    coachId?: SortOrder
    cohorteId?: SortOrder
    _count?: AffectationCountOrderByAggregateInput
    _avg?: AffectationAvgOrderByAggregateInput
    _max?: AffectationMaxOrderByAggregateInput
    _min?: AffectationMinOrderByAggregateInput
    _sum?: AffectationSumOrderByAggregateInput
  }

  export type AffectationScalarWhereWithAggregatesInput = {
    AND?: AffectationScalarWhereWithAggregatesInput | AffectationScalarWhereWithAggregatesInput[]
    OR?: AffectationScalarWhereWithAggregatesInput[]
    NOT?: AffectationScalarWhereWithAggregatesInput | AffectationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Affectation"> | number
    coachId?: IntWithAggregatesFilter<"Affectation"> | number
    cohorteId?: IntWithAggregatesFilter<"Affectation"> | number
  }

  export type ApprenantCreateInput = {
    prenom: string
    nom: string
    postnom: string
    date_naissance: Date | string
    adresse: string
    email: string
    telephone: string
    password?: string
    ordinateur: OrdinateurCreateNestedOneWithoutApprenantInput
    cohorte: CohorteCreateNestedOneWithoutApprenantInput
  }

  export type ApprenantUncheckedCreateInput = {
    id?: number
    ordinateurId: number
    cohorteId: number
    prenom: string
    nom: string
    postnom: string
    date_naissance: Date | string
    adresse: string
    email: string
    telephone: string
    password?: string
  }

  export type ApprenantUpdateInput = {
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    date_naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ordinateur?: OrdinateurUpdateOneRequiredWithoutApprenantNestedInput
    cohorte?: CohorteUpdateOneRequiredWithoutApprenantNestedInput
  }

  export type ApprenantUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ordinateurId?: IntFieldUpdateOperationsInput | number
    cohorteId?: IntFieldUpdateOperationsInput | number
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    date_naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type ApprenantUpdateManyMutationInput = {
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    date_naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type ApprenantUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ordinateurId?: IntFieldUpdateOperationsInput | number
    cohorteId?: IntFieldUpdateOperationsInput | number
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    date_naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type OrdinateurCreateInput = {
    tag: string
    modele: string
    fabriquant: string
    Apprenant?: ApprenantCreateNestedManyWithoutOrdinateurInput
  }

  export type OrdinateurUncheckedCreateInput = {
    id?: number
    tag: string
    modele: string
    fabriquant: string
    Apprenant?: ApprenantUncheckedCreateNestedManyWithoutOrdinateurInput
  }

  export type OrdinateurUpdateInput = {
    tag?: StringFieldUpdateOperationsInput | string
    modele?: StringFieldUpdateOperationsInput | string
    fabriquant?: StringFieldUpdateOperationsInput | string
    Apprenant?: ApprenantUpdateManyWithoutOrdinateurNestedInput
  }

  export type OrdinateurUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag?: StringFieldUpdateOperationsInput | string
    modele?: StringFieldUpdateOperationsInput | string
    fabriquant?: StringFieldUpdateOperationsInput | string
    Apprenant?: ApprenantUncheckedUpdateManyWithoutOrdinateurNestedInput
  }

  export type OrdinateurUpdateManyMutationInput = {
    tag?: StringFieldUpdateOperationsInput | string
    modele?: StringFieldUpdateOperationsInput | string
    fabriquant?: StringFieldUpdateOperationsInput | string
  }

  export type OrdinateurUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag?: StringFieldUpdateOperationsInput | string
    modele?: StringFieldUpdateOperationsInput | string
    fabriquant?: StringFieldUpdateOperationsInput | string
  }

  export type CohorteCreateInput = {
    code: number
    description: string
    session: SessionCreateNestedOneWithoutCohorteInput
    Apprenant?: ApprenantCreateNestedManyWithoutCohorteInput
    Affectation?: AffectationCreateNestedManyWithoutCohorteInput
  }

  export type CohorteUncheckedCreateInput = {
    id?: number
    code: number
    sessionId: number
    description: string
    Apprenant?: ApprenantUncheckedCreateNestedManyWithoutCohorteInput
    Affectation?: AffectationUncheckedCreateNestedManyWithoutCohorteInput
  }

  export type CohorteUpdateInput = {
    code?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    session?: SessionUpdateOneRequiredWithoutCohorteNestedInput
    Apprenant?: ApprenantUpdateManyWithoutCohorteNestedInput
    Affectation?: AffectationUpdateManyWithoutCohorteNestedInput
  }

  export type CohorteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    sessionId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    Apprenant?: ApprenantUncheckedUpdateManyWithoutCohorteNestedInput
    Affectation?: AffectationUncheckedUpdateManyWithoutCohorteNestedInput
  }

  export type CohorteUpdateManyMutationInput = {
    code?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type CohorteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    sessionId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type SessionCreateInput = {
    annee: number
    type: string
    ville: string
    Cohorte?: CohorteCreateNestedManyWithoutSessionInput
  }

  export type SessionUncheckedCreateInput = {
    id?: number
    annee: number
    type: string
    ville: string
    Cohorte?: CohorteUncheckedCreateNestedManyWithoutSessionInput
  }

  export type SessionUpdateInput = {
    annee?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    Cohorte?: CohorteUpdateManyWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    annee?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    Cohorte?: CohorteUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type SessionUpdateManyMutationInput = {
    annee?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    annee?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
  }

  export type CoachCreateInput = {
    prenom: string
    nom: string
    postnom: string
    date_naissance: Date | string
    adresse: string
    email: string
    telephone: string
    password?: string
    Affectation?: AffectationCreateNestedManyWithoutCoachInput
  }

  export type CoachUncheckedCreateInput = {
    id?: number
    prenom: string
    nom: string
    postnom: string
    date_naissance: Date | string
    adresse: string
    email: string
    telephone: string
    password?: string
    Affectation?: AffectationUncheckedCreateNestedManyWithoutCoachInput
  }

  export type CoachUpdateInput = {
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    date_naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Affectation?: AffectationUpdateManyWithoutCoachNestedInput
  }

  export type CoachUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    date_naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Affectation?: AffectationUncheckedUpdateManyWithoutCoachNestedInput
  }

  export type CoachUpdateManyMutationInput = {
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    date_naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type CoachUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    date_naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type AffectationCreateInput = {
    coach: CoachCreateNestedOneWithoutAffectationInput
    cohorte: CohorteCreateNestedOneWithoutAffectationInput
  }

  export type AffectationUncheckedCreateInput = {
    id?: number
    coachId: number
    cohorteId: number
  }

  export type AffectationUpdateInput = {
    coach?: CoachUpdateOneRequiredWithoutAffectationNestedInput
    cohorte?: CohorteUpdateOneRequiredWithoutAffectationNestedInput
  }

  export type AffectationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    coachId?: IntFieldUpdateOperationsInput | number
    cohorteId?: IntFieldUpdateOperationsInput | number
  }

  export type AffectationUpdateManyMutationInput = {

  }

  export type AffectationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    coachId?: IntFieldUpdateOperationsInput | number
    cohorteId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type OrdinateurRelationFilter = {
    is?: OrdinateurWhereInput
    isNot?: OrdinateurWhereInput
  }

  export type CohorteRelationFilter = {
    is?: CohorteWhereInput
    isNot?: CohorteWhereInput
  }

  export type ApprenantCountOrderByAggregateInput = {
    id?: SortOrder
    ordinateurId?: SortOrder
    cohorteId?: SortOrder
    prenom?: SortOrder
    nom?: SortOrder
    postnom?: SortOrder
    date_naissance?: SortOrder
    adresse?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    password?: SortOrder
  }

  export type ApprenantAvgOrderByAggregateInput = {
    id?: SortOrder
    ordinateurId?: SortOrder
    cohorteId?: SortOrder
  }

  export type ApprenantMaxOrderByAggregateInput = {
    id?: SortOrder
    ordinateurId?: SortOrder
    cohorteId?: SortOrder
    prenom?: SortOrder
    nom?: SortOrder
    postnom?: SortOrder
    date_naissance?: SortOrder
    adresse?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    password?: SortOrder
  }

  export type ApprenantMinOrderByAggregateInput = {
    id?: SortOrder
    ordinateurId?: SortOrder
    cohorteId?: SortOrder
    prenom?: SortOrder
    nom?: SortOrder
    postnom?: SortOrder
    date_naissance?: SortOrder
    adresse?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    password?: SortOrder
  }

  export type ApprenantSumOrderByAggregateInput = {
    id?: SortOrder
    ordinateurId?: SortOrder
    cohorteId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ApprenantListRelationFilter = {
    every?: ApprenantWhereInput
    some?: ApprenantWhereInput
    none?: ApprenantWhereInput
  }

  export type ApprenantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrdinateurCountOrderByAggregateInput = {
    id?: SortOrder
    tag?: SortOrder
    modele?: SortOrder
    fabriquant?: SortOrder
  }

  export type OrdinateurAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type OrdinateurMaxOrderByAggregateInput = {
    id?: SortOrder
    tag?: SortOrder
    modele?: SortOrder
    fabriquant?: SortOrder
  }

  export type OrdinateurMinOrderByAggregateInput = {
    id?: SortOrder
    tag?: SortOrder
    modele?: SortOrder
    fabriquant?: SortOrder
  }

  export type OrdinateurSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SessionRelationFilter = {
    is?: SessionWhereInput
    isNot?: SessionWhereInput
  }

  export type AffectationListRelationFilter = {
    every?: AffectationWhereInput
    some?: AffectationWhereInput
    none?: AffectationWhereInput
  }

  export type AffectationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CohorteCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    sessionId?: SortOrder
    description?: SortOrder
  }

  export type CohorteAvgOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    sessionId?: SortOrder
  }

  export type CohorteMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    sessionId?: SortOrder
    description?: SortOrder
  }

  export type CohorteMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    sessionId?: SortOrder
    description?: SortOrder
  }

  export type CohorteSumOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    sessionId?: SortOrder
  }

  export type CohorteListRelationFilter = {
    every?: CohorteWhereInput
    some?: CohorteWhereInput
    none?: CohorteWhereInput
  }

  export type CohorteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    annee?: SortOrder
    type?: SortOrder
    ville?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    id?: SortOrder
    annee?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    annee?: SortOrder
    type?: SortOrder
    ville?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    annee?: SortOrder
    type?: SortOrder
    ville?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    id?: SortOrder
    annee?: SortOrder
  }

  export type CoachCountOrderByAggregateInput = {
    id?: SortOrder
    prenom?: SortOrder
    nom?: SortOrder
    postnom?: SortOrder
    date_naissance?: SortOrder
    adresse?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    password?: SortOrder
  }

  export type CoachAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CoachMaxOrderByAggregateInput = {
    id?: SortOrder
    prenom?: SortOrder
    nom?: SortOrder
    postnom?: SortOrder
    date_naissance?: SortOrder
    adresse?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    password?: SortOrder
  }

  export type CoachMinOrderByAggregateInput = {
    id?: SortOrder
    prenom?: SortOrder
    nom?: SortOrder
    postnom?: SortOrder
    date_naissance?: SortOrder
    adresse?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    password?: SortOrder
  }

  export type CoachSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CoachRelationFilter = {
    is?: CoachWhereInput
    isNot?: CoachWhereInput
  }

  export type AffectationCountOrderByAggregateInput = {
    id?: SortOrder
    coachId?: SortOrder
    cohorteId?: SortOrder
  }

  export type AffectationAvgOrderByAggregateInput = {
    id?: SortOrder
    coachId?: SortOrder
    cohorteId?: SortOrder
  }

  export type AffectationMaxOrderByAggregateInput = {
    id?: SortOrder
    coachId?: SortOrder
    cohorteId?: SortOrder
  }

  export type AffectationMinOrderByAggregateInput = {
    id?: SortOrder
    coachId?: SortOrder
    cohorteId?: SortOrder
  }

  export type AffectationSumOrderByAggregateInput = {
    id?: SortOrder
    coachId?: SortOrder
    cohorteId?: SortOrder
  }

  export type OrdinateurCreateNestedOneWithoutApprenantInput = {
    create?: XOR<OrdinateurCreateWithoutApprenantInput, OrdinateurUncheckedCreateWithoutApprenantInput>
    connectOrCreate?: OrdinateurCreateOrConnectWithoutApprenantInput
    connect?: OrdinateurWhereUniqueInput
  }

  export type CohorteCreateNestedOneWithoutApprenantInput = {
    create?: XOR<CohorteCreateWithoutApprenantInput, CohorteUncheckedCreateWithoutApprenantInput>
    connectOrCreate?: CohorteCreateOrConnectWithoutApprenantInput
    connect?: CohorteWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type OrdinateurUpdateOneRequiredWithoutApprenantNestedInput = {
    create?: XOR<OrdinateurCreateWithoutApprenantInput, OrdinateurUncheckedCreateWithoutApprenantInput>
    connectOrCreate?: OrdinateurCreateOrConnectWithoutApprenantInput
    upsert?: OrdinateurUpsertWithoutApprenantInput
    connect?: OrdinateurWhereUniqueInput
    update?: XOR<XOR<OrdinateurUpdateToOneWithWhereWithoutApprenantInput, OrdinateurUpdateWithoutApprenantInput>, OrdinateurUncheckedUpdateWithoutApprenantInput>
  }

  export type CohorteUpdateOneRequiredWithoutApprenantNestedInput = {
    create?: XOR<CohorteCreateWithoutApprenantInput, CohorteUncheckedCreateWithoutApprenantInput>
    connectOrCreate?: CohorteCreateOrConnectWithoutApprenantInput
    upsert?: CohorteUpsertWithoutApprenantInput
    connect?: CohorteWhereUniqueInput
    update?: XOR<XOR<CohorteUpdateToOneWithWhereWithoutApprenantInput, CohorteUpdateWithoutApprenantInput>, CohorteUncheckedUpdateWithoutApprenantInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ApprenantCreateNestedManyWithoutOrdinateurInput = {
    create?: XOR<ApprenantCreateWithoutOrdinateurInput, ApprenantUncheckedCreateWithoutOrdinateurInput> | ApprenantCreateWithoutOrdinateurInput[] | ApprenantUncheckedCreateWithoutOrdinateurInput[]
    connectOrCreate?: ApprenantCreateOrConnectWithoutOrdinateurInput | ApprenantCreateOrConnectWithoutOrdinateurInput[]
    connect?: ApprenantWhereUniqueInput | ApprenantWhereUniqueInput[]
  }

  export type ApprenantUncheckedCreateNestedManyWithoutOrdinateurInput = {
    create?: XOR<ApprenantCreateWithoutOrdinateurInput, ApprenantUncheckedCreateWithoutOrdinateurInput> | ApprenantCreateWithoutOrdinateurInput[] | ApprenantUncheckedCreateWithoutOrdinateurInput[]
    connectOrCreate?: ApprenantCreateOrConnectWithoutOrdinateurInput | ApprenantCreateOrConnectWithoutOrdinateurInput[]
    connect?: ApprenantWhereUniqueInput | ApprenantWhereUniqueInput[]
  }

  export type ApprenantUpdateManyWithoutOrdinateurNestedInput = {
    create?: XOR<ApprenantCreateWithoutOrdinateurInput, ApprenantUncheckedCreateWithoutOrdinateurInput> | ApprenantCreateWithoutOrdinateurInput[] | ApprenantUncheckedCreateWithoutOrdinateurInput[]
    connectOrCreate?: ApprenantCreateOrConnectWithoutOrdinateurInput | ApprenantCreateOrConnectWithoutOrdinateurInput[]
    upsert?: ApprenantUpsertWithWhereUniqueWithoutOrdinateurInput | ApprenantUpsertWithWhereUniqueWithoutOrdinateurInput[]
    set?: ApprenantWhereUniqueInput | ApprenantWhereUniqueInput[]
    disconnect?: ApprenantWhereUniqueInput | ApprenantWhereUniqueInput[]
    delete?: ApprenantWhereUniqueInput | ApprenantWhereUniqueInput[]
    connect?: ApprenantWhereUniqueInput | ApprenantWhereUniqueInput[]
    update?: ApprenantUpdateWithWhereUniqueWithoutOrdinateurInput | ApprenantUpdateWithWhereUniqueWithoutOrdinateurInput[]
    updateMany?: ApprenantUpdateManyWithWhereWithoutOrdinateurInput | ApprenantUpdateManyWithWhereWithoutOrdinateurInput[]
    deleteMany?: ApprenantScalarWhereInput | ApprenantScalarWhereInput[]
  }

  export type ApprenantUncheckedUpdateManyWithoutOrdinateurNestedInput = {
    create?: XOR<ApprenantCreateWithoutOrdinateurInput, ApprenantUncheckedCreateWithoutOrdinateurInput> | ApprenantCreateWithoutOrdinateurInput[] | ApprenantUncheckedCreateWithoutOrdinateurInput[]
    connectOrCreate?: ApprenantCreateOrConnectWithoutOrdinateurInput | ApprenantCreateOrConnectWithoutOrdinateurInput[]
    upsert?: ApprenantUpsertWithWhereUniqueWithoutOrdinateurInput | ApprenantUpsertWithWhereUniqueWithoutOrdinateurInput[]
    set?: ApprenantWhereUniqueInput | ApprenantWhereUniqueInput[]
    disconnect?: ApprenantWhereUniqueInput | ApprenantWhereUniqueInput[]
    delete?: ApprenantWhereUniqueInput | ApprenantWhereUniqueInput[]
    connect?: ApprenantWhereUniqueInput | ApprenantWhereUniqueInput[]
    update?: ApprenantUpdateWithWhereUniqueWithoutOrdinateurInput | ApprenantUpdateWithWhereUniqueWithoutOrdinateurInput[]
    updateMany?: ApprenantUpdateManyWithWhereWithoutOrdinateurInput | ApprenantUpdateManyWithWhereWithoutOrdinateurInput[]
    deleteMany?: ApprenantScalarWhereInput | ApprenantScalarWhereInput[]
  }

  export type SessionCreateNestedOneWithoutCohorteInput = {
    create?: XOR<SessionCreateWithoutCohorteInput, SessionUncheckedCreateWithoutCohorteInput>
    connectOrCreate?: SessionCreateOrConnectWithoutCohorteInput
    connect?: SessionWhereUniqueInput
  }

  export type ApprenantCreateNestedManyWithoutCohorteInput = {
    create?: XOR<ApprenantCreateWithoutCohorteInput, ApprenantUncheckedCreateWithoutCohorteInput> | ApprenantCreateWithoutCohorteInput[] | ApprenantUncheckedCreateWithoutCohorteInput[]
    connectOrCreate?: ApprenantCreateOrConnectWithoutCohorteInput | ApprenantCreateOrConnectWithoutCohorteInput[]
    connect?: ApprenantWhereUniqueInput | ApprenantWhereUniqueInput[]
  }

  export type AffectationCreateNestedManyWithoutCohorteInput = {
    create?: XOR<AffectationCreateWithoutCohorteInput, AffectationUncheckedCreateWithoutCohorteInput> | AffectationCreateWithoutCohorteInput[] | AffectationUncheckedCreateWithoutCohorteInput[]
    connectOrCreate?: AffectationCreateOrConnectWithoutCohorteInput | AffectationCreateOrConnectWithoutCohorteInput[]
    connect?: AffectationWhereUniqueInput | AffectationWhereUniqueInput[]
  }

  export type ApprenantUncheckedCreateNestedManyWithoutCohorteInput = {
    create?: XOR<ApprenantCreateWithoutCohorteInput, ApprenantUncheckedCreateWithoutCohorteInput> | ApprenantCreateWithoutCohorteInput[] | ApprenantUncheckedCreateWithoutCohorteInput[]
    connectOrCreate?: ApprenantCreateOrConnectWithoutCohorteInput | ApprenantCreateOrConnectWithoutCohorteInput[]
    connect?: ApprenantWhereUniqueInput | ApprenantWhereUniqueInput[]
  }

  export type AffectationUncheckedCreateNestedManyWithoutCohorteInput = {
    create?: XOR<AffectationCreateWithoutCohorteInput, AffectationUncheckedCreateWithoutCohorteInput> | AffectationCreateWithoutCohorteInput[] | AffectationUncheckedCreateWithoutCohorteInput[]
    connectOrCreate?: AffectationCreateOrConnectWithoutCohorteInput | AffectationCreateOrConnectWithoutCohorteInput[]
    connect?: AffectationWhereUniqueInput | AffectationWhereUniqueInput[]
  }

  export type SessionUpdateOneRequiredWithoutCohorteNestedInput = {
    create?: XOR<SessionCreateWithoutCohorteInput, SessionUncheckedCreateWithoutCohorteInput>
    connectOrCreate?: SessionCreateOrConnectWithoutCohorteInput
    upsert?: SessionUpsertWithoutCohorteInput
    connect?: SessionWhereUniqueInput
    update?: XOR<XOR<SessionUpdateToOneWithWhereWithoutCohorteInput, SessionUpdateWithoutCohorteInput>, SessionUncheckedUpdateWithoutCohorteInput>
  }

  export type ApprenantUpdateManyWithoutCohorteNestedInput = {
    create?: XOR<ApprenantCreateWithoutCohorteInput, ApprenantUncheckedCreateWithoutCohorteInput> | ApprenantCreateWithoutCohorteInput[] | ApprenantUncheckedCreateWithoutCohorteInput[]
    connectOrCreate?: ApprenantCreateOrConnectWithoutCohorteInput | ApprenantCreateOrConnectWithoutCohorteInput[]
    upsert?: ApprenantUpsertWithWhereUniqueWithoutCohorteInput | ApprenantUpsertWithWhereUniqueWithoutCohorteInput[]
    set?: ApprenantWhereUniqueInput | ApprenantWhereUniqueInput[]
    disconnect?: ApprenantWhereUniqueInput | ApprenantWhereUniqueInput[]
    delete?: ApprenantWhereUniqueInput | ApprenantWhereUniqueInput[]
    connect?: ApprenantWhereUniqueInput | ApprenantWhereUniqueInput[]
    update?: ApprenantUpdateWithWhereUniqueWithoutCohorteInput | ApprenantUpdateWithWhereUniqueWithoutCohorteInput[]
    updateMany?: ApprenantUpdateManyWithWhereWithoutCohorteInput | ApprenantUpdateManyWithWhereWithoutCohorteInput[]
    deleteMany?: ApprenantScalarWhereInput | ApprenantScalarWhereInput[]
  }

  export type AffectationUpdateManyWithoutCohorteNestedInput = {
    create?: XOR<AffectationCreateWithoutCohorteInput, AffectationUncheckedCreateWithoutCohorteInput> | AffectationCreateWithoutCohorteInput[] | AffectationUncheckedCreateWithoutCohorteInput[]
    connectOrCreate?: AffectationCreateOrConnectWithoutCohorteInput | AffectationCreateOrConnectWithoutCohorteInput[]
    upsert?: AffectationUpsertWithWhereUniqueWithoutCohorteInput | AffectationUpsertWithWhereUniqueWithoutCohorteInput[]
    set?: AffectationWhereUniqueInput | AffectationWhereUniqueInput[]
    disconnect?: AffectationWhereUniqueInput | AffectationWhereUniqueInput[]
    delete?: AffectationWhereUniqueInput | AffectationWhereUniqueInput[]
    connect?: AffectationWhereUniqueInput | AffectationWhereUniqueInput[]
    update?: AffectationUpdateWithWhereUniqueWithoutCohorteInput | AffectationUpdateWithWhereUniqueWithoutCohorteInput[]
    updateMany?: AffectationUpdateManyWithWhereWithoutCohorteInput | AffectationUpdateManyWithWhereWithoutCohorteInput[]
    deleteMany?: AffectationScalarWhereInput | AffectationScalarWhereInput[]
  }

  export type ApprenantUncheckedUpdateManyWithoutCohorteNestedInput = {
    create?: XOR<ApprenantCreateWithoutCohorteInput, ApprenantUncheckedCreateWithoutCohorteInput> | ApprenantCreateWithoutCohorteInput[] | ApprenantUncheckedCreateWithoutCohorteInput[]
    connectOrCreate?: ApprenantCreateOrConnectWithoutCohorteInput | ApprenantCreateOrConnectWithoutCohorteInput[]
    upsert?: ApprenantUpsertWithWhereUniqueWithoutCohorteInput | ApprenantUpsertWithWhereUniqueWithoutCohorteInput[]
    set?: ApprenantWhereUniqueInput | ApprenantWhereUniqueInput[]
    disconnect?: ApprenantWhereUniqueInput | ApprenantWhereUniqueInput[]
    delete?: ApprenantWhereUniqueInput | ApprenantWhereUniqueInput[]
    connect?: ApprenantWhereUniqueInput | ApprenantWhereUniqueInput[]
    update?: ApprenantUpdateWithWhereUniqueWithoutCohorteInput | ApprenantUpdateWithWhereUniqueWithoutCohorteInput[]
    updateMany?: ApprenantUpdateManyWithWhereWithoutCohorteInput | ApprenantUpdateManyWithWhereWithoutCohorteInput[]
    deleteMany?: ApprenantScalarWhereInput | ApprenantScalarWhereInput[]
  }

  export type AffectationUncheckedUpdateManyWithoutCohorteNestedInput = {
    create?: XOR<AffectationCreateWithoutCohorteInput, AffectationUncheckedCreateWithoutCohorteInput> | AffectationCreateWithoutCohorteInput[] | AffectationUncheckedCreateWithoutCohorteInput[]
    connectOrCreate?: AffectationCreateOrConnectWithoutCohorteInput | AffectationCreateOrConnectWithoutCohorteInput[]
    upsert?: AffectationUpsertWithWhereUniqueWithoutCohorteInput | AffectationUpsertWithWhereUniqueWithoutCohorteInput[]
    set?: AffectationWhereUniqueInput | AffectationWhereUniqueInput[]
    disconnect?: AffectationWhereUniqueInput | AffectationWhereUniqueInput[]
    delete?: AffectationWhereUniqueInput | AffectationWhereUniqueInput[]
    connect?: AffectationWhereUniqueInput | AffectationWhereUniqueInput[]
    update?: AffectationUpdateWithWhereUniqueWithoutCohorteInput | AffectationUpdateWithWhereUniqueWithoutCohorteInput[]
    updateMany?: AffectationUpdateManyWithWhereWithoutCohorteInput | AffectationUpdateManyWithWhereWithoutCohorteInput[]
    deleteMany?: AffectationScalarWhereInput | AffectationScalarWhereInput[]
  }

  export type CohorteCreateNestedManyWithoutSessionInput = {
    create?: XOR<CohorteCreateWithoutSessionInput, CohorteUncheckedCreateWithoutSessionInput> | CohorteCreateWithoutSessionInput[] | CohorteUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: CohorteCreateOrConnectWithoutSessionInput | CohorteCreateOrConnectWithoutSessionInput[]
    connect?: CohorteWhereUniqueInput | CohorteWhereUniqueInput[]
  }

  export type CohorteUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<CohorteCreateWithoutSessionInput, CohorteUncheckedCreateWithoutSessionInput> | CohorteCreateWithoutSessionInput[] | CohorteUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: CohorteCreateOrConnectWithoutSessionInput | CohorteCreateOrConnectWithoutSessionInput[]
    connect?: CohorteWhereUniqueInput | CohorteWhereUniqueInput[]
  }

  export type CohorteUpdateManyWithoutSessionNestedInput = {
    create?: XOR<CohorteCreateWithoutSessionInput, CohorteUncheckedCreateWithoutSessionInput> | CohorteCreateWithoutSessionInput[] | CohorteUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: CohorteCreateOrConnectWithoutSessionInput | CohorteCreateOrConnectWithoutSessionInput[]
    upsert?: CohorteUpsertWithWhereUniqueWithoutSessionInput | CohorteUpsertWithWhereUniqueWithoutSessionInput[]
    set?: CohorteWhereUniqueInput | CohorteWhereUniqueInput[]
    disconnect?: CohorteWhereUniqueInput | CohorteWhereUniqueInput[]
    delete?: CohorteWhereUniqueInput | CohorteWhereUniqueInput[]
    connect?: CohorteWhereUniqueInput | CohorteWhereUniqueInput[]
    update?: CohorteUpdateWithWhereUniqueWithoutSessionInput | CohorteUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: CohorteUpdateManyWithWhereWithoutSessionInput | CohorteUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: CohorteScalarWhereInput | CohorteScalarWhereInput[]
  }

  export type CohorteUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<CohorteCreateWithoutSessionInput, CohorteUncheckedCreateWithoutSessionInput> | CohorteCreateWithoutSessionInput[] | CohorteUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: CohorteCreateOrConnectWithoutSessionInput | CohorteCreateOrConnectWithoutSessionInput[]
    upsert?: CohorteUpsertWithWhereUniqueWithoutSessionInput | CohorteUpsertWithWhereUniqueWithoutSessionInput[]
    set?: CohorteWhereUniqueInput | CohorteWhereUniqueInput[]
    disconnect?: CohorteWhereUniqueInput | CohorteWhereUniqueInput[]
    delete?: CohorteWhereUniqueInput | CohorteWhereUniqueInput[]
    connect?: CohorteWhereUniqueInput | CohorteWhereUniqueInput[]
    update?: CohorteUpdateWithWhereUniqueWithoutSessionInput | CohorteUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: CohorteUpdateManyWithWhereWithoutSessionInput | CohorteUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: CohorteScalarWhereInput | CohorteScalarWhereInput[]
  }

  export type AffectationCreateNestedManyWithoutCoachInput = {
    create?: XOR<AffectationCreateWithoutCoachInput, AffectationUncheckedCreateWithoutCoachInput> | AffectationCreateWithoutCoachInput[] | AffectationUncheckedCreateWithoutCoachInput[]
    connectOrCreate?: AffectationCreateOrConnectWithoutCoachInput | AffectationCreateOrConnectWithoutCoachInput[]
    connect?: AffectationWhereUniqueInput | AffectationWhereUniqueInput[]
  }

  export type AffectationUncheckedCreateNestedManyWithoutCoachInput = {
    create?: XOR<AffectationCreateWithoutCoachInput, AffectationUncheckedCreateWithoutCoachInput> | AffectationCreateWithoutCoachInput[] | AffectationUncheckedCreateWithoutCoachInput[]
    connectOrCreate?: AffectationCreateOrConnectWithoutCoachInput | AffectationCreateOrConnectWithoutCoachInput[]
    connect?: AffectationWhereUniqueInput | AffectationWhereUniqueInput[]
  }

  export type AffectationUpdateManyWithoutCoachNestedInput = {
    create?: XOR<AffectationCreateWithoutCoachInput, AffectationUncheckedCreateWithoutCoachInput> | AffectationCreateWithoutCoachInput[] | AffectationUncheckedCreateWithoutCoachInput[]
    connectOrCreate?: AffectationCreateOrConnectWithoutCoachInput | AffectationCreateOrConnectWithoutCoachInput[]
    upsert?: AffectationUpsertWithWhereUniqueWithoutCoachInput | AffectationUpsertWithWhereUniqueWithoutCoachInput[]
    set?: AffectationWhereUniqueInput | AffectationWhereUniqueInput[]
    disconnect?: AffectationWhereUniqueInput | AffectationWhereUniqueInput[]
    delete?: AffectationWhereUniqueInput | AffectationWhereUniqueInput[]
    connect?: AffectationWhereUniqueInput | AffectationWhereUniqueInput[]
    update?: AffectationUpdateWithWhereUniqueWithoutCoachInput | AffectationUpdateWithWhereUniqueWithoutCoachInput[]
    updateMany?: AffectationUpdateManyWithWhereWithoutCoachInput | AffectationUpdateManyWithWhereWithoutCoachInput[]
    deleteMany?: AffectationScalarWhereInput | AffectationScalarWhereInput[]
  }

  export type AffectationUncheckedUpdateManyWithoutCoachNestedInput = {
    create?: XOR<AffectationCreateWithoutCoachInput, AffectationUncheckedCreateWithoutCoachInput> | AffectationCreateWithoutCoachInput[] | AffectationUncheckedCreateWithoutCoachInput[]
    connectOrCreate?: AffectationCreateOrConnectWithoutCoachInput | AffectationCreateOrConnectWithoutCoachInput[]
    upsert?: AffectationUpsertWithWhereUniqueWithoutCoachInput | AffectationUpsertWithWhereUniqueWithoutCoachInput[]
    set?: AffectationWhereUniqueInput | AffectationWhereUniqueInput[]
    disconnect?: AffectationWhereUniqueInput | AffectationWhereUniqueInput[]
    delete?: AffectationWhereUniqueInput | AffectationWhereUniqueInput[]
    connect?: AffectationWhereUniqueInput | AffectationWhereUniqueInput[]
    update?: AffectationUpdateWithWhereUniqueWithoutCoachInput | AffectationUpdateWithWhereUniqueWithoutCoachInput[]
    updateMany?: AffectationUpdateManyWithWhereWithoutCoachInput | AffectationUpdateManyWithWhereWithoutCoachInput[]
    deleteMany?: AffectationScalarWhereInput | AffectationScalarWhereInput[]
  }

  export type CoachCreateNestedOneWithoutAffectationInput = {
    create?: XOR<CoachCreateWithoutAffectationInput, CoachUncheckedCreateWithoutAffectationInput>
    connectOrCreate?: CoachCreateOrConnectWithoutAffectationInput
    connect?: CoachWhereUniqueInput
  }

  export type CohorteCreateNestedOneWithoutAffectationInput = {
    create?: XOR<CohorteCreateWithoutAffectationInput, CohorteUncheckedCreateWithoutAffectationInput>
    connectOrCreate?: CohorteCreateOrConnectWithoutAffectationInput
    connect?: CohorteWhereUniqueInput
  }

  export type CoachUpdateOneRequiredWithoutAffectationNestedInput = {
    create?: XOR<CoachCreateWithoutAffectationInput, CoachUncheckedCreateWithoutAffectationInput>
    connectOrCreate?: CoachCreateOrConnectWithoutAffectationInput
    upsert?: CoachUpsertWithoutAffectationInput
    connect?: CoachWhereUniqueInput
    update?: XOR<XOR<CoachUpdateToOneWithWhereWithoutAffectationInput, CoachUpdateWithoutAffectationInput>, CoachUncheckedUpdateWithoutAffectationInput>
  }

  export type CohorteUpdateOneRequiredWithoutAffectationNestedInput = {
    create?: XOR<CohorteCreateWithoutAffectationInput, CohorteUncheckedCreateWithoutAffectationInput>
    connectOrCreate?: CohorteCreateOrConnectWithoutAffectationInput
    upsert?: CohorteUpsertWithoutAffectationInput
    connect?: CohorteWhereUniqueInput
    update?: XOR<XOR<CohorteUpdateToOneWithWhereWithoutAffectationInput, CohorteUpdateWithoutAffectationInput>, CohorteUncheckedUpdateWithoutAffectationInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type OrdinateurCreateWithoutApprenantInput = {
    tag: string
    modele: string
    fabriquant: string
  }

  export type OrdinateurUncheckedCreateWithoutApprenantInput = {
    id?: number
    tag: string
    modele: string
    fabriquant: string
  }

  export type OrdinateurCreateOrConnectWithoutApprenantInput = {
    where: OrdinateurWhereUniqueInput
    create: XOR<OrdinateurCreateWithoutApprenantInput, OrdinateurUncheckedCreateWithoutApprenantInput>
  }

  export type CohorteCreateWithoutApprenantInput = {
    code: number
    description: string
    session: SessionCreateNestedOneWithoutCohorteInput
    Affectation?: AffectationCreateNestedManyWithoutCohorteInput
  }

  export type CohorteUncheckedCreateWithoutApprenantInput = {
    id?: number
    code: number
    sessionId: number
    description: string
    Affectation?: AffectationUncheckedCreateNestedManyWithoutCohorteInput
  }

  export type CohorteCreateOrConnectWithoutApprenantInput = {
    where: CohorteWhereUniqueInput
    create: XOR<CohorteCreateWithoutApprenantInput, CohorteUncheckedCreateWithoutApprenantInput>
  }

  export type OrdinateurUpsertWithoutApprenantInput = {
    update: XOR<OrdinateurUpdateWithoutApprenantInput, OrdinateurUncheckedUpdateWithoutApprenantInput>
    create: XOR<OrdinateurCreateWithoutApprenantInput, OrdinateurUncheckedCreateWithoutApprenantInput>
    where?: OrdinateurWhereInput
  }

  export type OrdinateurUpdateToOneWithWhereWithoutApprenantInput = {
    where?: OrdinateurWhereInput
    data: XOR<OrdinateurUpdateWithoutApprenantInput, OrdinateurUncheckedUpdateWithoutApprenantInput>
  }

  export type OrdinateurUpdateWithoutApprenantInput = {
    tag?: StringFieldUpdateOperationsInput | string
    modele?: StringFieldUpdateOperationsInput | string
    fabriquant?: StringFieldUpdateOperationsInput | string
  }

  export type OrdinateurUncheckedUpdateWithoutApprenantInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag?: StringFieldUpdateOperationsInput | string
    modele?: StringFieldUpdateOperationsInput | string
    fabriquant?: StringFieldUpdateOperationsInput | string
  }

  export type CohorteUpsertWithoutApprenantInput = {
    update: XOR<CohorteUpdateWithoutApprenantInput, CohorteUncheckedUpdateWithoutApprenantInput>
    create: XOR<CohorteCreateWithoutApprenantInput, CohorteUncheckedCreateWithoutApprenantInput>
    where?: CohorteWhereInput
  }

  export type CohorteUpdateToOneWithWhereWithoutApprenantInput = {
    where?: CohorteWhereInput
    data: XOR<CohorteUpdateWithoutApprenantInput, CohorteUncheckedUpdateWithoutApprenantInput>
  }

  export type CohorteUpdateWithoutApprenantInput = {
    code?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    session?: SessionUpdateOneRequiredWithoutCohorteNestedInput
    Affectation?: AffectationUpdateManyWithoutCohorteNestedInput
  }

  export type CohorteUncheckedUpdateWithoutApprenantInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    sessionId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    Affectation?: AffectationUncheckedUpdateManyWithoutCohorteNestedInput
  }

  export type ApprenantCreateWithoutOrdinateurInput = {
    prenom: string
    nom: string
    postnom: string
    date_naissance: Date | string
    adresse: string
    email: string
    telephone: string
    password?: string
    cohorte: CohorteCreateNestedOneWithoutApprenantInput
  }

  export type ApprenantUncheckedCreateWithoutOrdinateurInput = {
    id?: number
    cohorteId: number
    prenom: string
    nom: string
    postnom: string
    date_naissance: Date | string
    adresse: string
    email: string
    telephone: string
    password?: string
  }

  export type ApprenantCreateOrConnectWithoutOrdinateurInput = {
    where: ApprenantWhereUniqueInput
    create: XOR<ApprenantCreateWithoutOrdinateurInput, ApprenantUncheckedCreateWithoutOrdinateurInput>
  }

  export type ApprenantUpsertWithWhereUniqueWithoutOrdinateurInput = {
    where: ApprenantWhereUniqueInput
    update: XOR<ApprenantUpdateWithoutOrdinateurInput, ApprenantUncheckedUpdateWithoutOrdinateurInput>
    create: XOR<ApprenantCreateWithoutOrdinateurInput, ApprenantUncheckedCreateWithoutOrdinateurInput>
  }

  export type ApprenantUpdateWithWhereUniqueWithoutOrdinateurInput = {
    where: ApprenantWhereUniqueInput
    data: XOR<ApprenantUpdateWithoutOrdinateurInput, ApprenantUncheckedUpdateWithoutOrdinateurInput>
  }

  export type ApprenantUpdateManyWithWhereWithoutOrdinateurInput = {
    where: ApprenantScalarWhereInput
    data: XOR<ApprenantUpdateManyMutationInput, ApprenantUncheckedUpdateManyWithoutOrdinateurInput>
  }

  export type ApprenantScalarWhereInput = {
    AND?: ApprenantScalarWhereInput | ApprenantScalarWhereInput[]
    OR?: ApprenantScalarWhereInput[]
    NOT?: ApprenantScalarWhereInput | ApprenantScalarWhereInput[]
    id?: IntFilter<"Apprenant"> | number
    ordinateurId?: IntFilter<"Apprenant"> | number
    cohorteId?: IntFilter<"Apprenant"> | number
    prenom?: StringFilter<"Apprenant"> | string
    nom?: StringFilter<"Apprenant"> | string
    postnom?: StringFilter<"Apprenant"> | string
    date_naissance?: DateTimeFilter<"Apprenant"> | Date | string
    adresse?: StringFilter<"Apprenant"> | string
    email?: StringFilter<"Apprenant"> | string
    telephone?: StringFilter<"Apprenant"> | string
    password?: StringFilter<"Apprenant"> | string
  }

  export type SessionCreateWithoutCohorteInput = {
    annee: number
    type: string
    ville: string
  }

  export type SessionUncheckedCreateWithoutCohorteInput = {
    id?: number
    annee: number
    type: string
    ville: string
  }

  export type SessionCreateOrConnectWithoutCohorteInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutCohorteInput, SessionUncheckedCreateWithoutCohorteInput>
  }

  export type ApprenantCreateWithoutCohorteInput = {
    prenom: string
    nom: string
    postnom: string
    date_naissance: Date | string
    adresse: string
    email: string
    telephone: string
    password?: string
    ordinateur: OrdinateurCreateNestedOneWithoutApprenantInput
  }

  export type ApprenantUncheckedCreateWithoutCohorteInput = {
    id?: number
    ordinateurId: number
    prenom: string
    nom: string
    postnom: string
    date_naissance: Date | string
    adresse: string
    email: string
    telephone: string
    password?: string
  }

  export type ApprenantCreateOrConnectWithoutCohorteInput = {
    where: ApprenantWhereUniqueInput
    create: XOR<ApprenantCreateWithoutCohorteInput, ApprenantUncheckedCreateWithoutCohorteInput>
  }

  export type AffectationCreateWithoutCohorteInput = {
    coach: CoachCreateNestedOneWithoutAffectationInput
  }

  export type AffectationUncheckedCreateWithoutCohorteInput = {
    id?: number
    coachId: number
  }

  export type AffectationCreateOrConnectWithoutCohorteInput = {
    where: AffectationWhereUniqueInput
    create: XOR<AffectationCreateWithoutCohorteInput, AffectationUncheckedCreateWithoutCohorteInput>
  }

  export type SessionUpsertWithoutCohorteInput = {
    update: XOR<SessionUpdateWithoutCohorteInput, SessionUncheckedUpdateWithoutCohorteInput>
    create: XOR<SessionCreateWithoutCohorteInput, SessionUncheckedCreateWithoutCohorteInput>
    where?: SessionWhereInput
  }

  export type SessionUpdateToOneWithWhereWithoutCohorteInput = {
    where?: SessionWhereInput
    data: XOR<SessionUpdateWithoutCohorteInput, SessionUncheckedUpdateWithoutCohorteInput>
  }

  export type SessionUpdateWithoutCohorteInput = {
    annee?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
  }

  export type SessionUncheckedUpdateWithoutCohorteInput = {
    id?: IntFieldUpdateOperationsInput | number
    annee?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
  }

  export type ApprenantUpsertWithWhereUniqueWithoutCohorteInput = {
    where: ApprenantWhereUniqueInput
    update: XOR<ApprenantUpdateWithoutCohorteInput, ApprenantUncheckedUpdateWithoutCohorteInput>
    create: XOR<ApprenantCreateWithoutCohorteInput, ApprenantUncheckedCreateWithoutCohorteInput>
  }

  export type ApprenantUpdateWithWhereUniqueWithoutCohorteInput = {
    where: ApprenantWhereUniqueInput
    data: XOR<ApprenantUpdateWithoutCohorteInput, ApprenantUncheckedUpdateWithoutCohorteInput>
  }

  export type ApprenantUpdateManyWithWhereWithoutCohorteInput = {
    where: ApprenantScalarWhereInput
    data: XOR<ApprenantUpdateManyMutationInput, ApprenantUncheckedUpdateManyWithoutCohorteInput>
  }

  export type AffectationUpsertWithWhereUniqueWithoutCohorteInput = {
    where: AffectationWhereUniqueInput
    update: XOR<AffectationUpdateWithoutCohorteInput, AffectationUncheckedUpdateWithoutCohorteInput>
    create: XOR<AffectationCreateWithoutCohorteInput, AffectationUncheckedCreateWithoutCohorteInput>
  }

  export type AffectationUpdateWithWhereUniqueWithoutCohorteInput = {
    where: AffectationWhereUniqueInput
    data: XOR<AffectationUpdateWithoutCohorteInput, AffectationUncheckedUpdateWithoutCohorteInput>
  }

  export type AffectationUpdateManyWithWhereWithoutCohorteInput = {
    where: AffectationScalarWhereInput
    data: XOR<AffectationUpdateManyMutationInput, AffectationUncheckedUpdateManyWithoutCohorteInput>
  }

  export type AffectationScalarWhereInput = {
    AND?: AffectationScalarWhereInput | AffectationScalarWhereInput[]
    OR?: AffectationScalarWhereInput[]
    NOT?: AffectationScalarWhereInput | AffectationScalarWhereInput[]
    id?: IntFilter<"Affectation"> | number
    coachId?: IntFilter<"Affectation"> | number
    cohorteId?: IntFilter<"Affectation"> | number
  }

  export type CohorteCreateWithoutSessionInput = {
    code: number
    description: string
    Apprenant?: ApprenantCreateNestedManyWithoutCohorteInput
    Affectation?: AffectationCreateNestedManyWithoutCohorteInput
  }

  export type CohorteUncheckedCreateWithoutSessionInput = {
    id?: number
    code: number
    description: string
    Apprenant?: ApprenantUncheckedCreateNestedManyWithoutCohorteInput
    Affectation?: AffectationUncheckedCreateNestedManyWithoutCohorteInput
  }

  export type CohorteCreateOrConnectWithoutSessionInput = {
    where: CohorteWhereUniqueInput
    create: XOR<CohorteCreateWithoutSessionInput, CohorteUncheckedCreateWithoutSessionInput>
  }

  export type CohorteUpsertWithWhereUniqueWithoutSessionInput = {
    where: CohorteWhereUniqueInput
    update: XOR<CohorteUpdateWithoutSessionInput, CohorteUncheckedUpdateWithoutSessionInput>
    create: XOR<CohorteCreateWithoutSessionInput, CohorteUncheckedCreateWithoutSessionInput>
  }

  export type CohorteUpdateWithWhereUniqueWithoutSessionInput = {
    where: CohorteWhereUniqueInput
    data: XOR<CohorteUpdateWithoutSessionInput, CohorteUncheckedUpdateWithoutSessionInput>
  }

  export type CohorteUpdateManyWithWhereWithoutSessionInput = {
    where: CohorteScalarWhereInput
    data: XOR<CohorteUpdateManyMutationInput, CohorteUncheckedUpdateManyWithoutSessionInput>
  }

  export type CohorteScalarWhereInput = {
    AND?: CohorteScalarWhereInput | CohorteScalarWhereInput[]
    OR?: CohorteScalarWhereInput[]
    NOT?: CohorteScalarWhereInput | CohorteScalarWhereInput[]
    id?: IntFilter<"Cohorte"> | number
    code?: IntFilter<"Cohorte"> | number
    sessionId?: IntFilter<"Cohorte"> | number
    description?: StringFilter<"Cohorte"> | string
  }

  export type AffectationCreateWithoutCoachInput = {
    cohorte: CohorteCreateNestedOneWithoutAffectationInput
  }

  export type AffectationUncheckedCreateWithoutCoachInput = {
    id?: number
    cohorteId: number
  }

  export type AffectationCreateOrConnectWithoutCoachInput = {
    where: AffectationWhereUniqueInput
    create: XOR<AffectationCreateWithoutCoachInput, AffectationUncheckedCreateWithoutCoachInput>
  }

  export type AffectationUpsertWithWhereUniqueWithoutCoachInput = {
    where: AffectationWhereUniqueInput
    update: XOR<AffectationUpdateWithoutCoachInput, AffectationUncheckedUpdateWithoutCoachInput>
    create: XOR<AffectationCreateWithoutCoachInput, AffectationUncheckedCreateWithoutCoachInput>
  }

  export type AffectationUpdateWithWhereUniqueWithoutCoachInput = {
    where: AffectationWhereUniqueInput
    data: XOR<AffectationUpdateWithoutCoachInput, AffectationUncheckedUpdateWithoutCoachInput>
  }

  export type AffectationUpdateManyWithWhereWithoutCoachInput = {
    where: AffectationScalarWhereInput
    data: XOR<AffectationUpdateManyMutationInput, AffectationUncheckedUpdateManyWithoutCoachInput>
  }

  export type CoachCreateWithoutAffectationInput = {
    prenom: string
    nom: string
    postnom: string
    date_naissance: Date | string
    adresse: string
    email: string
    telephone: string
    password?: string
  }

  export type CoachUncheckedCreateWithoutAffectationInput = {
    id?: number
    prenom: string
    nom: string
    postnom: string
    date_naissance: Date | string
    adresse: string
    email: string
    telephone: string
    password?: string
  }

  export type CoachCreateOrConnectWithoutAffectationInput = {
    where: CoachWhereUniqueInput
    create: XOR<CoachCreateWithoutAffectationInput, CoachUncheckedCreateWithoutAffectationInput>
  }

  export type CohorteCreateWithoutAffectationInput = {
    code: number
    description: string
    session: SessionCreateNestedOneWithoutCohorteInput
    Apprenant?: ApprenantCreateNestedManyWithoutCohorteInput
  }

  export type CohorteUncheckedCreateWithoutAffectationInput = {
    id?: number
    code: number
    sessionId: number
    description: string
    Apprenant?: ApprenantUncheckedCreateNestedManyWithoutCohorteInput
  }

  export type CohorteCreateOrConnectWithoutAffectationInput = {
    where: CohorteWhereUniqueInput
    create: XOR<CohorteCreateWithoutAffectationInput, CohorteUncheckedCreateWithoutAffectationInput>
  }

  export type CoachUpsertWithoutAffectationInput = {
    update: XOR<CoachUpdateWithoutAffectationInput, CoachUncheckedUpdateWithoutAffectationInput>
    create: XOR<CoachCreateWithoutAffectationInput, CoachUncheckedCreateWithoutAffectationInput>
    where?: CoachWhereInput
  }

  export type CoachUpdateToOneWithWhereWithoutAffectationInput = {
    where?: CoachWhereInput
    data: XOR<CoachUpdateWithoutAffectationInput, CoachUncheckedUpdateWithoutAffectationInput>
  }

  export type CoachUpdateWithoutAffectationInput = {
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    date_naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type CoachUncheckedUpdateWithoutAffectationInput = {
    id?: IntFieldUpdateOperationsInput | number
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    date_naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type CohorteUpsertWithoutAffectationInput = {
    update: XOR<CohorteUpdateWithoutAffectationInput, CohorteUncheckedUpdateWithoutAffectationInput>
    create: XOR<CohorteCreateWithoutAffectationInput, CohorteUncheckedCreateWithoutAffectationInput>
    where?: CohorteWhereInput
  }

  export type CohorteUpdateToOneWithWhereWithoutAffectationInput = {
    where?: CohorteWhereInput
    data: XOR<CohorteUpdateWithoutAffectationInput, CohorteUncheckedUpdateWithoutAffectationInput>
  }

  export type CohorteUpdateWithoutAffectationInput = {
    code?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    session?: SessionUpdateOneRequiredWithoutCohorteNestedInput
    Apprenant?: ApprenantUpdateManyWithoutCohorteNestedInput
  }

  export type CohorteUncheckedUpdateWithoutAffectationInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    sessionId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    Apprenant?: ApprenantUncheckedUpdateManyWithoutCohorteNestedInput
  }

  export type ApprenantUpdateWithoutOrdinateurInput = {
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    date_naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    cohorte?: CohorteUpdateOneRequiredWithoutApprenantNestedInput
  }

  export type ApprenantUncheckedUpdateWithoutOrdinateurInput = {
    id?: IntFieldUpdateOperationsInput | number
    cohorteId?: IntFieldUpdateOperationsInput | number
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    date_naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type ApprenantUncheckedUpdateManyWithoutOrdinateurInput = {
    id?: IntFieldUpdateOperationsInput | number
    cohorteId?: IntFieldUpdateOperationsInput | number
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    date_naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type ApprenantUpdateWithoutCohorteInput = {
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    date_naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ordinateur?: OrdinateurUpdateOneRequiredWithoutApprenantNestedInput
  }

  export type ApprenantUncheckedUpdateWithoutCohorteInput = {
    id?: IntFieldUpdateOperationsInput | number
    ordinateurId?: IntFieldUpdateOperationsInput | number
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    date_naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type ApprenantUncheckedUpdateManyWithoutCohorteInput = {
    id?: IntFieldUpdateOperationsInput | number
    ordinateurId?: IntFieldUpdateOperationsInput | number
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    date_naissance?: DateTimeFieldUpdateOperationsInput | Date | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type AffectationUpdateWithoutCohorteInput = {
    coach?: CoachUpdateOneRequiredWithoutAffectationNestedInput
  }

  export type AffectationUncheckedUpdateWithoutCohorteInput = {
    id?: IntFieldUpdateOperationsInput | number
    coachId?: IntFieldUpdateOperationsInput | number
  }

  export type AffectationUncheckedUpdateManyWithoutCohorteInput = {
    id?: IntFieldUpdateOperationsInput | number
    coachId?: IntFieldUpdateOperationsInput | number
  }

  export type CohorteUpdateWithoutSessionInput = {
    code?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    Apprenant?: ApprenantUpdateManyWithoutCohorteNestedInput
    Affectation?: AffectationUpdateManyWithoutCohorteNestedInput
  }

  export type CohorteUncheckedUpdateWithoutSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    Apprenant?: ApprenantUncheckedUpdateManyWithoutCohorteNestedInput
    Affectation?: AffectationUncheckedUpdateManyWithoutCohorteNestedInput
  }

  export type CohorteUncheckedUpdateManyWithoutSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type AffectationUpdateWithoutCoachInput = {
    cohorte?: CohorteUpdateOneRequiredWithoutAffectationNestedInput
  }

  export type AffectationUncheckedUpdateWithoutCoachInput = {
    id?: IntFieldUpdateOperationsInput | number
    cohorteId?: IntFieldUpdateOperationsInput | number
  }

  export type AffectationUncheckedUpdateManyWithoutCoachInput = {
    id?: IntFieldUpdateOperationsInput | number
    cohorteId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use OrdinateurCountOutputTypeDefaultArgs instead
     */
    export type OrdinateurCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrdinateurCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CohorteCountOutputTypeDefaultArgs instead
     */
    export type CohorteCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CohorteCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionCountOutputTypeDefaultArgs instead
     */
    export type SessionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CoachCountOutputTypeDefaultArgs instead
     */
    export type CoachCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CoachCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ApprenantDefaultArgs instead
     */
    export type ApprenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ApprenantDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrdinateurDefaultArgs instead
     */
    export type OrdinateurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrdinateurDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CohorteDefaultArgs instead
     */
    export type CohorteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CohorteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionDefaultArgs instead
     */
    export type SessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CoachDefaultArgs instead
     */
    export type CoachArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CoachDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AffectationDefaultArgs instead
     */
    export type AffectationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AffectationDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}